/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-09-29 16:32:34.505484
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((IkReal(0.0490000000000000))*(x6));
x13=((IkReal(0.0950000000000000))*(x7));
x14=((IkReal(1.00000000000000))*(x10));
x15=((IkReal(0.0490000000000000))*(x2));
x16=((IkReal(1.00000000000000))*(x11));
x17=((IkReal(1.00000000000000))*(x7));
x18=((IkReal(0.0950000000000000))*(x4));
x19=((IkReal(1.00000000000000))*(x2));
x20=((IkReal(0.0950000000000000))*(x0));
x21=((IkReal(0.350000000000000))*(x1));
x22=((IkReal(0.0490000000000000))*(x5));
x23=((IkReal(0.350000000000000))*(x2));
x24=((IkReal(1.00000000000000))*(x4));
x25=((x1)*(x2));
x26=((x3)*(x7));
x27=((x0)*(x3));
x28=((x3)*(x4));
x29=((x0)*(x4));
x30=((x11)*(x6));
x31=((x1)*(x4));
x32=((x1)*(x19));
x33=((IkReal(0.0490000000000000))*(x31));
x34=((x24)*(x27));
x35=((x17)*(x28));
x36=((x28)+(((IkReal(-1.00000000000000))*(x32))));
x37=((((x1)*(x24)))+(((x19)*(x3))));
x38=((IkReal(-1.00000000000000))*(x37));
x39=((((x0)*(x25)))+(((IkReal(-1.00000000000000))*(x34))));
x40=((((IkReal(-1.00000000000000))*(x35)))+(((x25)*(x7))));
x41=((x37)*(x5));
x42=((x38)*(x6));
x43=((((IkReal(-1.00000000000000))*(x19)*(x27)))+(((IkReal(-1.00000000000000))*(x0)*(x1)*(x24))));
x44=((((x0)*(x1)*(x24)))+(((x19)*(x27))));
IkReal x55=((IkReal(1.00000000000000))*(x17));
x45=((((IkReal(-1.00000000000000))*(x31)*(x55)))+(((IkReal(-1.00000000000000))*(x2)*(x3)*(x55))));
x46=((((x17)*(x2)*(x3)))+(((x17)*(x31))));
x47=((x40)*(x6));
x48=((x11)*(x43));
x49=((x11)*(x45));
x50=((((x39)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x5))));
x51=((x47)+(((x0)*(x5))));
x52=((((IkReal(-1.00000000000000))*(x17)*(x6)))+(((x5)*(((x34)+(((IkReal(-1.00000000000000))*(x0)*(x32))))))));
x53=((((x5)*(((x35)+(((IkReal(-1.00000000000000))*(x17)*(x25)))))))+(((x0)*(x6))));
x54=((x10)*(x50));
eerot[0]=((((x8)*(((x54)+(x48)))))+(((x52)*(x9))));
eerot[1]=((((x9)*(((((IkReal(-1.00000000000000))*(x14)*(x50)))+(((IkReal(-1.00000000000000))*(x16)*(x43)))))))+(((x52)*(x8))));
eerot[2]=((((x10)*(x44)))+(((x11)*(x50))));
eetrans[0]=((((x13)*(x6)))+(((IkReal(0.350000000000000))*(x27)))+(((x10)*(((((x15)*(x27)))+(((IkReal(0.0490000000000000))*(x1)*(x29)))))))+(((x11)*(((((x12)*(x39)))+(((IkReal(-1.00000000000000))*(x22)*(x7)))))))+(((x21)*(x29)))+(((x5)*(((((x20)*(x25)))+(((IkReal(-1.00000000000000))*(x18)*(x27)))))))+(((x23)*(x27))));
eerot[3]=((((x8)*(((((x10)*(x51)))+(x49)))))+(((x53)*(x9))));
eerot[4]=((((x9)*(((((IkReal(-1.00000000000000))*(x14)*(x51)))+(((IkReal(-1.00000000000000))*(x16)*(x45)))))))+(((x53)*(x8))));
eerot[5]=((((x11)*(x51)))+(((x10)*(x46))));
eetrans[1]=((((x11)*(((((x12)*(x40)))+(((x0)*(x22)))))))+(((IkReal(-1.00000000000000))*(x20)*(x6)))+(((x10)*(((((x15)*(x26)))+(((x33)*(x7)))))))+(((x21)*(x4)*(x7)))+(((IkReal(0.350000000000000))*(x26)))+(((x23)*(x26)))+(((x5)*(((((IkReal(-1.00000000000000))*(x13)*(x28)))+(((x13)*(x25))))))));
eerot[6]=((((x41)*(x9)))+(((x8)*(((((x11)*(x36)))+(((x10)*(x42))))))));
eerot[7]=((((x41)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x14)*(x42)))+(((IkReal(-1.00000000000000))*(x16)*(x36))))))));
eerot[8]=((((x10)*(((x32)+(((IkReal(-1.00000000000000))*(x24)*(x3)))))))+(((x30)*(x38))));
eetrans[2]=((IkReal(0.410000000000000))+(((x2)*(x21)))+(x21)+(((x10)*(((((IkReal(-0.0490000000000000))*(x28)))+(((x1)*(x15)))))))+(((IkReal(-0.350000000000000))*(x28)))+(((x30)*(((((IkReal(-1.00000000000000))*(x33)))+(((IkReal(-1.00000000000000))*(x15)*(x3)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x1)*(x18)))+(((IkReal(-0.0950000000000000))*(x2)*(x3))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.0490000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((IkReal(-0.0490000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.410000000000000))+(pz)+(((IkReal(-0.0490000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
IkReal op[72], zeror[48];
int numroots;
IkReal x56=((IkReal(0.0950000000000000))*(r11));
IkReal x57=((IkReal(0.190000000000000))*(r10));
IkReal x58=((((IkReal(-1.00000000000000))*(x56)))+(py));
IkReal x59=((IkReal(0.700000000000000))*(rxp1_1));
IkReal x60=((IkReal(0.190000000000000))*(px));
IkReal x61=((IkReal(0.00902500000000000))*(r01));
IkReal x62=((IkReal(0.00902500000000000))*(r21));
IkReal x63=((IkReal(0.190000000000000))*(pz));
IkReal x64=((pp)*(r01));
IkReal x65=((IkReal(0.0180500000000000))*(r00));
IkReal x66=((IkReal(1.40000000000000))*(rxp0_1));
IkReal x67=((IkReal(0.190000000000000))*(r01));
IkReal x68=((IkReal(2.00000000000000))*(px));
IkReal x69=((IkReal(0.380000000000000))*(py));
IkReal x70=((IkReal(0.0180500000000000))*(r11));
IkReal x71=((IkReal(1.40000000000000))*(rxp1_0));
IkReal x72=((IkReal(2.80000000000000))*(rxp0_0));
IkReal x73=((IkReal(0.0361000000000000))*(r10));
IkReal x74=((IkReal(1.00000000000000))*(py));
IkReal x75=((IkReal(2.00000000000000))*(pp));
IkReal x76=((IkReal(4.00000000000000))*(npx));
IkReal x77=((pp)*(r21));
IkReal x78=((x56)+(py));
IkReal x79=((npy)*(x68));
IkReal x80=((IkReal(2.00000000000000))*(npy)*(pz));
IkReal x81=((r00)*(x75));
IkReal x82=((px)*(x76));
IkReal x83=((IkReal(1.00000000000000))*(x64));
IkReal x84=((IkReal(-0.380000000000000))*(r00));
IkReal x85=((x67)+(((IkReal(-1.00000000000000))*(x68))));
IkReal x86=((r11)*(x75));
IkReal x87=((IkReal(4.00000000000000))*(npy)*(py));
IkReal x88=((IkReal(4.00000000000000))*(pp)*(r10));
IkReal x89=((IkReal(8.00000000000000))*(npx)*(py));
IkReal x90=((IkReal(-0.190000000000000))*(r10));
IkReal x91=((x56)+(((IkReal(-1.00000000000000))*(x74))));
IkReal x92=((((IkReal(-1.00000000000000))*(x67)))+(((IkReal(-1.00000000000000))*(x68))));
IkReal x93=((((IkReal(-1.00000000000000))*(x74)))+(((IkReal(-1.00000000000000))*(x56))));
IkReal x94=((x69)+(x71));
IkReal x95=((x60)+(x64));
IkReal x96=((x66)+(x81));
IkReal x97=((x65)+(x82));
IkReal x98=((x61)+(x79));
IkReal x99=((x70)+(x87));
IkReal x100=((x62)+(x80));
IkReal x101=((x59)+(x83));
IkReal x102=((x73)+(x89));
IkReal x103=((((IkReal(-0.0180500000000000))*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(x76)))+(((r20)*(x75))));
IkReal x104=((x60)+(x98));
IkReal x105=((x66)+(x97));
IkReal x106=((x59)+(x98));
IkReal x107=((((IkReal(-1.00000000000000))*(x63)))+(x77)+(((IkReal(-1.00000000000000))*(x100))));
IkReal x108=((((IkReal(-1.00000000000000))*(x63)))+(((IkReal(-1.00000000000000))*(x77)))+(x100));
IkReal x109=((x59)+(x104));
op[0]=x78;
op[1]=IkReal(0);
op[2]=x57;
op[3]=IkReal(0);
op[4]=x58;
op[5]=IkReal(0);
op[6]=IkReal(0);
op[7]=x78;
op[8]=IkReal(0);
op[9]=x57;
op[10]=IkReal(0);
op[11]=x58;
op[12]=((((IkReal(-1.00000000000000))*(x101)))+(x104));
op[13]=x107;
op[14]=((((IkReal(-1.00000000000000))*(x96)))+(x97));
op[15]=x103;
op[16]=((x59)+(((IkReal(-1.00000000000000))*(x98)))+(x95));
op[17]=x108;
op[18]=x107;
op[19]=((x64)+(((IkReal(-1.00000000000000))*(x109))));
op[20]=x103;
op[21]=((((IkReal(-1.00000000000000))*(x105)))+(x81));
op[22]=x108;
op[23]=((((IkReal(-1.00000000000000))*(x60)))+(((IkReal(-1.00000000000000))*(x83)))+(x106));
op[24]=x92;
op[25]=IkReal(0);
op[26]=x84;
op[27]=IkReal(0);
op[28]=x85;
op[29]=IkReal(0);
op[30]=IkReal(0);
op[31]=x92;
op[32]=IkReal(0);
op[33]=x84;
op[34]=IkReal(0);
op[35]=x85;
op[36]=((((IkReal(-1.00000000000000))*(x86)))+(x99)+(x94));
op[37]=IkReal(0);
op[38]=((((IkReal(-1.00000000000000))*(x88)))+(x72)+(x102));
op[39]=IkReal(0);
op[40]=((x69)+(((IkReal(-1.00000000000000))*(x99)))+(x86)+(((IkReal(-1.00000000000000))*(x71))));
op[41]=IkReal(0);
op[42]=IkReal(0);
op[43]=((((IkReal(-1.00000000000000))*(x99)))+(x71)+(x86)+(((IkReal(-1.00000000000000))*(x69))));
op[44]=IkReal(0);
op[45]=((((IkReal(-1.00000000000000))*(x102)))+(x72)+(x88));
op[46]=IkReal(0);
op[47]=((((IkReal(-1.00000000000000))*(x94)))+(((IkReal(-1.00000000000000))*(x86)))+(x99));
op[48]=x93;
op[49]=IkReal(0);
op[50]=x90;
op[51]=IkReal(0);
op[52]=x91;
op[53]=IkReal(0);
op[54]=IkReal(0);
op[55]=x93;
op[56]=IkReal(0);
op[57]=x90;
op[58]=IkReal(0);
op[59]=x91;
op[60]=((x59)+(x64)+(((IkReal(-1.00000000000000))*(x104))));
op[61]=x107;
op[62]=((((IkReal(-1.00000000000000))*(x97)))+(x96));
op[63]=x103;
op[64]=((((IkReal(-1.00000000000000))*(x101)))+(((IkReal(-1.00000000000000))*(x60)))+(x98));
op[65]=x108;
op[66]=x107;
op[67]=((((IkReal(-1.00000000000000))*(x83)))+(x109));
op[68]=x103;
op[69]=((((IkReal(-1.00000000000000))*(x81)))+(x105));
op[70]=x108;
op[71]=((((IkReal(-1.00000000000000))*(x106)))+(x95));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
j0array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj0)));
j5array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj5)));
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
IkReal x110=(htj0)*(htj0);
IkReal x111=(htj5)*(htj5);
IkReal x112=(htj1)*(htj1);
cj0array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x110))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x110)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x110))))));
cj5array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x111))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x111)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x111))))));
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x112))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x112)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x112))))));
sj0array[numsolutions]=((IkReal(2.00000000000000))*(htj0)*(((IKabs(((IkReal(1.00000000000000))+((htj0)*(htj0)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj0)*(htj0))))):(IkReal)1.0e30)));
sj5array[numsolutions]=((IkReal(2.00000000000000))*(htj5)*(((IKabs(((IkReal(1.00000000000000))+((htj5)*(htj5)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj5)*(htj5))))):(IkReal)1.0e30)));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(-7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x113=((IkReal(1.00000000000000))*(sj0));
cj3array[0]=((((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x113)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x113))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((sj3)*((sj1)*(sj1))))+(((sj3)*((cj1)*(cj1))))));
dummyeval[0]=((((sj3)*((sj1)*(sj1))))+(((sj3)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x114=((IkReal(7.00000000000000))*(sj3));
gconst1=IKsign(((((x114)*((sj1)*(sj1))))+(((x114)*((cj1)*(cj1))))));
dummyeval[0]=((((sj3)*((sj1)*(sj1))))+(((sj3)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x115=(cj0)*(cj0);
IkReal x116=(sj5)*(sj5);
IkReal x117=(cj5)*(cj5);
IkReal x118=(sj0)*(sj0);
IkReal x119=((IkReal(2.00000000000000))*(r10));
IkReal x120=((cj5)*(sj5));
IkReal x121=((cj0)*(sj0));
IkReal x122=((IkReal(2.00000000000000))*(r01));
IkReal x123=((IkReal(1.00000000000000))*(x115));
IkReal x124=((IkReal(1.00000000000000))*(x118));
gconst3=IKsign(((((IkReal(-1.00000000000000))*(x117)*(x124)*((r00)*(r00))))+(((r00)*(x118)*(x120)*(x122)))+(((r11)*(x115)*(x119)*(x120)))+(((IkReal(-1.00000000000000))*(x117)*(x123)*((r10)*(r10))))+(((IkReal(-2.00000000000000))*(r00)*(r11)*(x120)*(x121)))+(((IkReal(-1.00000000000000))*(x116)*(x123)*((r11)*(r11))))+(((IkReal(2.00000000000000))*(r02)*(r12)*(x121)))+(((r11)*(x116)*(x121)*(x122)))+(((IkReal(-1.00000000000000))*(x116)*(x124)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x124)*((r02)*(r02))))+(((IkReal(-1.00000000000000))*(r01)*(x119)*(x120)*(x121)))+(((IkReal(-1.00000000000000))*(x123)*((r12)*(r12))))+(((r00)*(x117)*(x119)*(x121)))));
IkReal x125=(cj0)*(cj0);
IkReal x126=(sj5)*(sj5);
IkReal x127=(cj5)*(cj5);
IkReal x128=(sj0)*(sj0);
IkReal x129=((IkReal(2.00000000000000))*(r10));
IkReal x130=((cj5)*(sj5));
IkReal x131=((cj0)*(sj0));
IkReal x132=((IkReal(2.00000000000000))*(r01));
IkReal x133=((IkReal(1.00000000000000))*(x125));
IkReal x134=((IkReal(1.00000000000000))*(x128));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r01)*(x129)*(x130)*(x131)))+(((r11)*(x126)*(x131)*(x132)))+(((r00)*(x127)*(x129)*(x131)))+(((IkReal(-1.00000000000000))*(x127)*(x134)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x126)*(x133)*((r11)*(r11))))+(((r11)*(x125)*(x129)*(x130)))+(((IkReal(-2.00000000000000))*(r00)*(r11)*(x130)*(x131)))+(((IkReal(-1.00000000000000))*(x126)*(x134)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x133)*((r12)*(r12))))+(((IkReal(2.00000000000000))*(r02)*(r12)*(x131)))+(((IkReal(-1.00000000000000))*(x127)*(x133)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x134)*((r02)*(r02))))+(((r00)*(x128)*(x130)*(x132))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x135=((IkReal(0.0950000000000000))*(cj0));
IkReal x136=((r10)*(sj5));
IkReal x137=((cj5)*(r01));
IkReal x138=((IkReal(0.0950000000000000))*(sj0));
IkReal x139=((IkReal(1.00000000000000))*(cj0));
IkReal x140=((r00)*(sj5));
IkReal x141=((cj5)*(r11));
IkReal x142=((IkReal(1.00000000000000))*(sj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r20)*(sj5)))+(((cj5)*(r21))));
evalcond[2]=((IkReal(1.00000000000000))+(((sj0)*(x140)))+(((IkReal(-1.00000000000000))*(x136)*(x139)))+(((sj0)*(x137)))+(((IkReal(-1.00000000000000))*(x139)*(x141))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x135)*(x141)))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((x137)*(x138)))+(((px)*(sj0)))+(((x138)*(x140)))+(((IkReal(-1.00000000000000))*(py)*(x139))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x141)*(x142)))+(((IkReal(-1.00000000000000))*(x136)*(x142)))+(((IkReal(-1.00000000000000))*(x137)*(x139))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(-7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x143=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r02)*(sj0)))+(((IkReal(-1.00000000000000))*(r12)*(x143))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r11)*(sj5)*(x143)))+(((IkReal(-1.00000000000000))*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))+(((cj0)*(cj5)*(r10))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x144=IKatan2(((((r02)*(sj0)))+(((IkReal(-1.00000000000000))*(r12)*(x143)))), ((((IkReal(-1.00000000000000))*(r11)*(sj5)*(x143)))+(((IkReal(-1.00000000000000))*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))+(((cj0)*(cj5)*(r10)))));
j4array[0]=((IkReal(-1.00000000000000))*(x144));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x144))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x145=IKcos(j4);
IkReal x146=IKsin(j4);
IkReal x147=((IkReal(1.00000000000000))*(x145));
evalcond[0]=((((cj5)*(r00)*(sj0)*(x145)))+(((cj0)*(r11)*(sj5)*(x145)))+(((r02)*(sj0)*(x146)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)*(x147)))+(((IkReal(-1.00000000000000))*(cj0)*(r12)*(x146)))+(((IkReal(-1.00000000000000))*(cj0)*(cj5)*(r10)*(x147))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x148=((IkReal(7.00000000000000))*(sj1));
IkReal x149=((IkReal(1.90000000000000))*(cj1));
IkReal x150=((r20)*(sj5));
IkReal x151=((IkReal(7.00000000000000))*(cj1));
IkReal x152=((r22)*(sj4));
IkReal x153=((cj5)*(r21));
IkReal x154=((IkReal(1.90000000000000))*(sj1));
IkReal x155=((IkReal(20.0000000000000))*(pz));
IkReal x156=((cj4)*(cj5)*(r20));
IkReal x157=((cj4)*(r21)*(sj5));
if( IKabs(((gconst14)*(((((x153)*(x154)))+(((x151)*(x156)))+(((IkReal(-1.00000000000000))*(cj1)*(x148)))+(((x150)*(x154)))+(((x151)*(x152)))+(((sj1)*(x155)))+(((IkReal(-1.00000000000000))*(x151)*(x157))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(x149)*(x150)))+(((x148)*(x152)))+(((x148)*(x156)))+(((IkReal(-1.00000000000000))*(x149)*(x153)))+(((IkReal(-1.00000000000000))*(x148)*(x157)))+(((IkReal(-1.00000000000000))*(cj1)*(x155)))+(((cj1)*(x151))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst14)*(((((x153)*(x154)))+(((x151)*(x156)))+(((IkReal(-1.00000000000000))*(cj1)*(x148)))+(((x150)*(x154)))+(((x151)*(x152)))+(((sj1)*(x155)))+(((IkReal(-1.00000000000000))*(x151)*(x157)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(x149)*(x150)))+(((x148)*(x152)))+(((x148)*(x156)))+(((IkReal(-1.00000000000000))*(x149)*(x153)))+(((IkReal(-1.00000000000000))*(x148)*(x157)))+(((IkReal(-1.00000000000000))*(cj1)*(x155)))+(((cj1)*(x151)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x158=IKsin(j2);
IkReal x159=IKcos(j2);
IkReal x160=((IkReal(0.0950000000000000))*(cj5));
IkReal x161=((sj0)*(sj5));
IkReal x162=((IkReal(1.00000000000000))*(sj4));
IkReal x163=((IkReal(0.350000000000000))*(sj1));
IkReal x164=((cj5)*(r00));
IkReal x165=((IkReal(0.0950000000000000))*(sj5));
IkReal x166=((cj5)*(r20));
IkReal x167=((cj0)*(r01));
IkReal x168=((IkReal(1.00000000000000))*(sj0));
IkReal x169=((cj5)*(r10));
IkReal x170=((r21)*(sj5));
IkReal x171=((sj1)*(x159));
IkReal x172=((cj1)*(x158));
IkReal x173=((cj1)*(x159));
IkReal x174=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x175=((sj1)*(x158));
IkReal x176=((x171)+(x172));
evalcond[0]=((((r21)*(x160)))+(((IkReal(-0.350000000000000))*(cj1)))+(((r20)*(x165)))+(((x158)*(x163)))+(((IkReal(-0.350000000000000))*(x173)))+(pz));
evalcond[1]=((x175)+(((IkReal(-1.00000000000000))*(x173)))+(((cj4)*(r22)))+(((sj4)*(x170)))+(((IkReal(-1.00000000000000))*(x162)*(x166))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x170)))+(x176)+(((r22)*(sj4)))+(((cj4)*(x166))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((x159)*(x163)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x160)))+(((IkReal(-1.00000000000000))*(py)*(x168)))+(((IkReal(-1.00000000000000))*(x160)*(x167)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x165)))+(x163)+(((IkReal(-0.0950000000000000))*(r10)*(x161)))+(((IkReal(0.350000000000000))*(x172))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj5)*(x162)*(x167)))+(((IkReal(-1.00000000000000))*(r02)*(x174)))+(x176)+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x168)))+(((sj0)*(sj4)*(x169)))+(((cj0)*(sj4)*(x164)))+(((IkReal(-1.00000000000000))*(r11)*(x161)*(x162))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x162)))+(((cj4)*(sj5)*(x167)))+(((cj4)*(r11)*(x161)))+(((IkReal(-1.00000000000000))*(x175)))+(x173)+(((IkReal(-1.00000000000000))*(cj4)*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x162)))+(((IkReal(-1.00000000000000))*(x164)*(x174))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x177=((r21)*(sj5));
IkReal x178=((sj1)*(sj4));
IkReal x179=((IkReal(1.00000000000000))*(sj1));
IkReal x180=((cj4)*(sj1));
IkReal x181=((cj1)*(sj4));
IkReal x182=((cj5)*(r20));
IkReal x183=((IkReal(1.00000000000000))*(cj1)*(cj4));
IkReal x184=((sj4)*(x182));
if( IKabs(((gconst13)*(((((r22)*(x181)))+(((x177)*(x178)))+(((IkReal(-1.00000000000000))*(x178)*(x182)))+(((IkReal(-1.00000000000000))*(x177)*(x183)))+(((cj1)*(cj4)*(x182)))+(((r22)*(x180))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(x177)*(x181)))+(((IkReal(-1.00000000000000))*(r22)*(x183)))+(((x180)*(x182)))+(((IkReal(-1.00000000000000))*(cj4)*(x177)*(x179)))+(((x181)*(x182)))+(((r22)*(x178))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst13)*(((((r22)*(x181)))+(((x177)*(x178)))+(((IkReal(-1.00000000000000))*(x178)*(x182)))+(((IkReal(-1.00000000000000))*(x177)*(x183)))+(((cj1)*(cj4)*(x182)))+(((r22)*(x180)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(x177)*(x181)))+(((IkReal(-1.00000000000000))*(r22)*(x183)))+(((x180)*(x182)))+(((IkReal(-1.00000000000000))*(cj4)*(x177)*(x179)))+(((x181)*(x182)))+(((r22)*(x178)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x185=IKsin(j2);
IkReal x186=IKcos(j2);
IkReal x187=((IkReal(0.0950000000000000))*(cj5));
IkReal x188=((sj0)*(sj5));
IkReal x189=((IkReal(1.00000000000000))*(sj4));
IkReal x190=((IkReal(0.350000000000000))*(sj1));
IkReal x191=((cj5)*(r00));
IkReal x192=((IkReal(0.0950000000000000))*(sj5));
IkReal x193=((cj5)*(r20));
IkReal x194=((cj0)*(r01));
IkReal x195=((IkReal(1.00000000000000))*(sj0));
IkReal x196=((cj5)*(r10));
IkReal x197=((r21)*(sj5));
IkReal x198=((sj1)*(x186));
IkReal x199=((cj1)*(x185));
IkReal x200=((cj1)*(x186));
IkReal x201=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x202=((sj1)*(x185));
IkReal x203=((x199)+(x198));
evalcond[0]=((((r20)*(x192)))+(((IkReal(-0.350000000000000))*(cj1)))+(((x185)*(x190)))+(pz)+(((IkReal(-0.350000000000000))*(x200)))+(((r21)*(x187))));
evalcond[1]=((((sj4)*(x197)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(x200)))+(x202)+(((IkReal(-1.00000000000000))*(x189)*(x193))));
evalcond[2]=((((cj4)*(x193)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x197)))+(x203));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x187)))+(((IkReal(-0.0950000000000000))*(r10)*(x188)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x192)))+(x190)+(((IkReal(-1.00000000000000))*(py)*(x195)))+(((x186)*(x190)))+(((IkReal(0.350000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(x187)*(x194))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj4)*(r12)*(x195)))+(((sj0)*(sj4)*(x196)))+(((cj0)*(sj4)*(x191)))+(((IkReal(-1.00000000000000))*(sj5)*(x189)*(x194)))+(((IkReal(-1.00000000000000))*(r11)*(x188)*(x189)))+(((IkReal(-1.00000000000000))*(r02)*(x201)))+(x203));
evalcond[5]=((((cj4)*(r11)*(x188)))+(((cj4)*(sj5)*(x194)))+(((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(cj4)*(x195)*(x196)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x189)))+(x200)+(((IkReal(-1.00000000000000))*(x191)*(x201)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x204=((cj0)*(cj1));
IkReal x205=((IkReal(20.0000000000000))*(px));
IkReal x206=((sj0)*(sj1));
IkReal x207=((IkReal(20.0000000000000))*(py));
IkReal x208=((IkReal(1.90000000000000))*(cj1));
IkReal x209=((r20)*(sj5));
IkReal x210=((cj5)*(r11));
IkReal x211=((IkReal(1.90000000000000))*(sj1));
IkReal x212=((cj5)*(r01));
IkReal x213=((IkReal(1.90000000000000))*(sj5));
IkReal x214=((IkReal(20.0000000000000))*(pz));
IkReal x215=((IkReal(1.90000000000000))*(cj5)*(r21));
if( IKabs(((gconst12)*(((((cj5)*(r21)*(x211)))+(((IkReal(-1.00000000000000))*(cj1)*(sj0)*(x207)))+(((x209)*(x211)))+(((IkReal(-1.90000000000000))*(x204)*(x212)))+(((IkReal(-1.00000000000000))*(sj0)*(x208)*(x210)))+(((sj1)*(x214)))+(((IkReal(-1.00000000000000))*(x204)*(x205)))+(((IkReal(-1.00000000000000))*(r00)*(x204)*(x213)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(sj5)*(x208))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x208)*(x209)))+(((IkReal(-1.00000000000000))*(r10)*(x206)*(x213)))+(((IkReal(-1.00000000000000))*(x206)*(x207)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)*(x208)))+(((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.90000000000000))*(x206)*(x210)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(sj5)*(x211)))+(((IkReal(-1.00000000000000))*(cj1)*(x214)))+(((IkReal(-1.00000000000000))*(cj0)*(x211)*(x212)))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(cj0)*(sj1)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst12)*(((((cj5)*(r21)*(x211)))+(((IkReal(-1.00000000000000))*(cj1)*(sj0)*(x207)))+(((x209)*(x211)))+(((IkReal(-1.90000000000000))*(x204)*(x212)))+(((IkReal(-1.00000000000000))*(sj0)*(x208)*(x210)))+(((sj1)*(x214)))+(((IkReal(-1.00000000000000))*(x204)*(x205)))+(((IkReal(-1.00000000000000))*(r00)*(x204)*(x213)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(sj5)*(x208)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(x208)*(x209)))+(((IkReal(-1.00000000000000))*(r10)*(x206)*(x213)))+(((IkReal(-1.00000000000000))*(x206)*(x207)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)*(x208)))+(((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.90000000000000))*(x206)*(x210)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(sj5)*(x211)))+(((IkReal(-1.00000000000000))*(cj1)*(x214)))+(((IkReal(-1.00000000000000))*(cj0)*(x211)*(x212)))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(cj0)*(sj1)*(x205)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x216=IKsin(j2);
IkReal x217=IKcos(j2);
IkReal x218=((IkReal(0.350000000000000))*(cj1));
IkReal x219=((IkReal(0.0950000000000000))*(cj5));
IkReal x220=((IkReal(0.0950000000000000))*(sj5));
IkReal x221=((IkReal(0.350000000000000))*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(x217)*(x218)))+(((r20)*(x220)))+(((IkReal(-1.00000000000000))*(x218)))+(((x216)*(x221)))+(((r21)*(x219)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x220)))+(((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x219)))+(((x216)*(x218)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x220)))+(((x217)*(x221)))+(x221)+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x219)))+(((IkReal(-1.00000000000000))*(py)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign((((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))));
dummyeval[0]=(((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
IkReal x222=(sj5)*(sj5);
IkReal x223=(cj5)*(cj5);
IkReal x224=((r00)*(sj0));
IkReal x225=((IkReal(1.00000000000000))*(sj0));
IkReal x226=((cj0)*(r10));
IkReal x227=((cj0)*(r11));
IkReal x228=((cj5)*(r21)*(sj5));
IkReal x229=((r20)*(x223));
IkReal x230=((r21)*(x222));
IkReal x231=((cj5)*(r20)*(sj5));
gconst16=IKsign(((((IkReal(-1.00000000000000))*(r01)*(x225)*(x230)))+(((IkReal(-1.00000000000000))*(x227)*(x231)))+(((IkReal(-1.00000000000000))*(r02)*(r22)*(x225)))+(((IkReal(-1.00000000000000))*(x224)*(x229)))+(((cj0)*(r12)*(r22)))+(((x226)*(x229)))+(((x227)*(x230)))+(((r01)*(sj0)*(x231)))+(((IkReal(-1.00000000000000))*(x226)*(x228)))+(((x224)*(x228)))));
IkReal x232=(sj5)*(sj5);
IkReal x233=(cj5)*(cj5);
IkReal x234=((r00)*(sj0));
IkReal x235=((IkReal(1.00000000000000))*(sj0));
IkReal x236=((cj0)*(r10));
IkReal x237=((cj0)*(r11));
IkReal x238=((cj5)*(r21)*(sj5));
IkReal x239=((r20)*(x233));
IkReal x240=((r21)*(x232));
IkReal x241=((cj5)*(r20)*(sj5));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x234)*(x239)))+(((r01)*(sj0)*(x241)))+(((IkReal(-1.00000000000000))*(r02)*(r22)*(x235)))+(((IkReal(-1.00000000000000))*(x236)*(x238)))+(((IkReal(-1.00000000000000))*(r01)*(x235)*(x240)))+(((x236)*(x239)))+(((cj0)*(r12)*(r22)))+(((x234)*(x238)))+(((x237)*(x240)))+(((IkReal(-1.00000000000000))*(x237)*(x241))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x242=((cj2)*(sj1));
IkReal x243=((r02)*(sj0));
IkReal x244=((cj1)*(sj2));
IkReal x245=((cj0)*(r11)*(sj5));
IkReal x246=((cj5)*(r00)*(sj0));
IkReal x247=((IkReal(1.00000000000000))*(cj0)*(r12));
IkReal x248=((IkReal(1.00000000000000))*(cj0)*(cj5)*(r10));
IkReal x249=((IkReal(1.00000000000000))*(r01)*(sj0)*(sj5));
if( IKabs(((gconst16)*(((((x243)*(x244)))+(((IkReal(-1.00000000000000))*(x242)*(x247)))+(((IkReal(-1.00000000000000))*(x244)*(x247)))+(((x242)*(x243))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x244)*(x248)))+(((IkReal(-1.00000000000000))*(x244)*(x249)))+(((IkReal(-1.00000000000000))*(x242)*(x249)))+(((x244)*(x246)))+(((x242)*(x246)))+(((x244)*(x245)))+(((x242)*(x245)))+(((IkReal(-1.00000000000000))*(x242)*(x248))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((x243)*(x244)))+(((IkReal(-1.00000000000000))*(x242)*(x247)))+(((IkReal(-1.00000000000000))*(x244)*(x247)))+(((x242)*(x243)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x244)*(x248)))+(((IkReal(-1.00000000000000))*(x244)*(x249)))+(((IkReal(-1.00000000000000))*(x242)*(x249)))+(((x244)*(x246)))+(((x242)*(x246)))+(((x244)*(x245)))+(((x242)*(x245)))+(((IkReal(-1.00000000000000))*(x242)*(x248)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x250=IKsin(j4);
IkReal x251=IKcos(j4);
IkReal x252=((cj1)*(sj2));
IkReal x253=((cj2)*(sj1));
IkReal x254=((r12)*(sj0));
IkReal x255=((r11)*(sj5));
IkReal x256=((cj0)*(r12));
IkReal x257=((sj1)*(sj2));
IkReal x258=((cj5)*(sj0));
IkReal x259=((cj0)*(r02));
IkReal x260=((cj1)*(cj2));
IkReal x261=((r21)*(sj5));
IkReal x262=((cj0)*(cj5));
IkReal x263=((r01)*(sj5));
IkReal x264=((cj5)*(r20));
IkReal x265=((IkReal(1.00000000000000))*(x250));
IkReal x266=((IkReal(1.00000000000000))*(x251));
IkReal x267=((sj0)*(x251));
IkReal x268=((r10)*(x250));
IkReal x269=((cj0)*(x251));
IkReal x270=((sj0)*(x250));
IkReal x271=((x252)+(x253));
evalcond[0]=((((IkReal(-1.00000000000000))*(x264)*(x265)))+(x257)+(((r22)*(x251)))+(((IkReal(-1.00000000000000))*(x260)))+(((x250)*(x261))));
evalcond[1]=((((x251)*(x264)))+(((r22)*(x250)))+(((IkReal(-1.00000000000000))*(x261)*(x266)))+(x271));
evalcond[2]=((((x262)*(x268)))+(((IkReal(-1.00000000000000))*(r00)*(x258)*(x265)))+(((IkReal(-1.00000000000000))*(cj0)*(x255)*(x265)))+(((IkReal(-1.00000000000000))*(x256)*(x266)))+(((r02)*(x267)))+(((x263)*(x270))));
evalcond[3]=((((r00)*(x251)*(x258)))+(((r02)*(x270)))+(((IkReal(-1.00000000000000))*(sj0)*(x263)*(x266)))+(((IkReal(-1.00000000000000))*(x256)*(x265)))+(((x255)*(x269)))+(((IkReal(-1.00000000000000))*(r10)*(x262)*(x266))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(x263)*(x265)))+(((x258)*(x268)))+(x271)+(((IkReal(-1.00000000000000))*(sj0)*(x255)*(x265)))+(((r00)*(x250)*(x262)))+(((IkReal(-1.00000000000000))*(x259)*(x266)))+(((IkReal(-1.00000000000000))*(x254)*(x266))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r10)*(x258)*(x266)))+(((x255)*(x267)))+(((x263)*(x269)))+(((IkReal(-1.00000000000000))*(x254)*(x265)))+(((IkReal(-1.00000000000000))*(x259)*(x265)))+(((IkReal(-1.00000000000000))*(x257)))+(((IkReal(-1.00000000000000))*(r00)*(x262)*(x266)))+(x260));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x272=((IkReal(1.00000000000000))*(sj1));
IkReal x273=((cj1)*(r22));
IkReal x274=((IkReal(1.00000000000000))*(sj2));
IkReal x275=((r21)*(sj5));
IkReal x276=((cj5)*(r20));
IkReal x277=((cj2)*(x276));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(cj2)*(r22)*(x272)))+(((IkReal(-1.00000000000000))*(sj2)*(x272)*(x275)))+(((sj1)*(sj2)*(x276)))+(((cj1)*(cj2)*(x275)))+(((IkReal(-1.00000000000000))*(cj1)*(x277)))+(((IkReal(-1.00000000000000))*(x273)*(x274))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((cj1)*(sj2)*(x275)))+(((cj2)*(sj1)*(x275)))+(((cj2)*(x273)))+(((IkReal(-1.00000000000000))*(r22)*(sj2)*(x272)))+(((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(cj1)*(x274)*(x276))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(cj2)*(r22)*(x272)))+(((IkReal(-1.00000000000000))*(sj2)*(x272)*(x275)))+(((sj1)*(sj2)*(x276)))+(((cj1)*(cj2)*(x275)))+(((IkReal(-1.00000000000000))*(cj1)*(x277)))+(((IkReal(-1.00000000000000))*(x273)*(x274)))))), ((gconst15)*(((((cj1)*(sj2)*(x275)))+(((cj2)*(sj1)*(x275)))+(((cj2)*(x273)))+(((IkReal(-1.00000000000000))*(r22)*(sj2)*(x272)))+(((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(cj1)*(x274)*(x276)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x278=IKsin(j4);
IkReal x279=IKcos(j4);
IkReal x280=((cj1)*(sj2));
IkReal x281=((cj2)*(sj1));
IkReal x282=((r12)*(sj0));
IkReal x283=((r11)*(sj5));
IkReal x284=((cj0)*(r12));
IkReal x285=((sj1)*(sj2));
IkReal x286=((cj5)*(sj0));
IkReal x287=((cj0)*(r02));
IkReal x288=((cj1)*(cj2));
IkReal x289=((r21)*(sj5));
IkReal x290=((cj0)*(cj5));
IkReal x291=((r01)*(sj5));
IkReal x292=((cj5)*(r20));
IkReal x293=((IkReal(1.00000000000000))*(x278));
IkReal x294=((IkReal(1.00000000000000))*(x279));
IkReal x295=((sj0)*(x279));
IkReal x296=((r10)*(x278));
IkReal x297=((cj0)*(x279));
IkReal x298=((sj0)*(x278));
IkReal x299=((x281)+(x280));
evalcond[0]=((((r22)*(x279)))+(x285)+(((x278)*(x289)))+(((IkReal(-1.00000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(x292)*(x293))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x289)*(x294)))+(((r22)*(x278)))+(x299)+(((x279)*(x292))));
evalcond[2]=((((x290)*(x296)))+(((x291)*(x298)))+(((IkReal(-1.00000000000000))*(cj0)*(x283)*(x293)))+(((IkReal(-1.00000000000000))*(r00)*(x286)*(x293)))+(((r02)*(x295)))+(((IkReal(-1.00000000000000))*(x284)*(x294))));
evalcond[3]=((((r02)*(x298)))+(((IkReal(-1.00000000000000))*(sj0)*(x291)*(x294)))+(((x283)*(x297)))+(((IkReal(-1.00000000000000))*(r10)*(x290)*(x294)))+(((IkReal(-1.00000000000000))*(x284)*(x293)))+(((r00)*(x279)*(x286))));
evalcond[4]=((((r00)*(x278)*(x290)))+(((x286)*(x296)))+(((IkReal(-1.00000000000000))*(x282)*(x294)))+(((IkReal(-1.00000000000000))*(cj0)*(x291)*(x293)))+(((IkReal(-1.00000000000000))*(sj0)*(x283)*(x293)))+(x299)+(((IkReal(-1.00000000000000))*(x287)*(x294))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x287)*(x293)))+(((IkReal(-1.00000000000000))*(x285)))+(x288)+(((IkReal(-1.00000000000000))*(x282)*(x293)))+(((x291)*(x297)))+(((x283)*(x295)))+(((IkReal(-1.00000000000000))*(r00)*(x290)*(x294)))+(((IkReal(-1.00000000000000))*(r10)*(x286)*(x294))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x300=((IkReal(0.0950000000000000))*(cj0));
IkReal x301=((r10)*(sj5));
IkReal x302=((cj5)*(r01));
IkReal x303=((IkReal(0.0950000000000000))*(sj0));
IkReal x304=((IkReal(1.00000000000000))*(cj0));
IkReal x305=((r00)*(sj5));
IkReal x306=((cj5)*(r11));
IkReal x307=((IkReal(1.00000000000000))*(sj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j3, IkReal(6.28318530717959))));
evalcond[1]=((((r20)*(sj5)))+(((cj5)*(r21))));
evalcond[2]=((IkReal(-1.00000000000000))+(((sj0)*(x302)))+(((sj0)*(x305)))+(((IkReal(-1.00000000000000))*(x304)*(x306)))+(((IkReal(-1.00000000000000))*(x301)*(x304))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x300)*(x301)))+(((IkReal(-1.00000000000000))*(py)*(x304)))+(((x302)*(x303)))+(((IkReal(-1.00000000000000))*(x300)*(x306)))+(((px)*(sj0)))+(((x303)*(x305))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x306)*(x307)))+(((IkReal(-1.00000000000000))*(x302)*(x304)))+(((IkReal(-1.00000000000000))*(x301)*(x307)))+(((IkReal(-1.00000000000000))*(x304)*(x305))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x308=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r02)*(sj0)))+(((IkReal(-1.00000000000000))*(r12)*(x308))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r11)*(sj5)*(x308)))+(((IkReal(-1.00000000000000))*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))+(((cj0)*(cj5)*(r10))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x309=IKatan2(((((r02)*(sj0)))+(((IkReal(-1.00000000000000))*(r12)*(x308)))), ((((IkReal(-1.00000000000000))*(r11)*(sj5)*(x308)))+(((IkReal(-1.00000000000000))*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))+(((cj0)*(cj5)*(r10)))));
j4array[0]=((IkReal(-1.00000000000000))*(x309));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x309))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x310=IKcos(j4);
IkReal x311=IKsin(j4);
IkReal x312=((IkReal(1.00000000000000))*(x310));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj0)*(r12)*(x311)))+(((cj0)*(r11)*(sj5)*(x310)))+(((r02)*(sj0)*(x311)))+(((IkReal(-1.00000000000000))*(cj0)*(cj5)*(r10)*(x312)))+(((cj5)*(r00)*(sj0)*(x310)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)*(x312))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign((((cj1)*(cj1))+((sj1)*(sj1))));
dummyeval[0]=(((cj1)*(cj1))+((sj1)*(sj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=(((cj1)*(cj1))+((sj1)*(sj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x313=((IkReal(1.90000000000000))*(cj1));
IkReal x314=((cj5)*(r21));
IkReal x315=((r20)*(sj5));
IkReal x316=((IkReal(7.00000000000000))*(sj1));
IkReal x317=((IkReal(7.00000000000000))*(cj1));
IkReal x318=((r22)*(sj4));
IkReal x319=((IkReal(1.90000000000000))*(sj1));
IkReal x320=((IkReal(20.0000000000000))*(pz));
IkReal x321=((cj4)*(cj5)*(r20));
IkReal x322=((cj4)*(r21)*(sj5));
if( IKabs(((gconst19)*(((((x317)*(x318)))+(((cj1)*(x316)))+(((IkReal(-1.00000000000000))*(sj1)*(x320)))+(((x317)*(x321)))+(((IkReal(-1.00000000000000))*(x315)*(x319)))+(((IkReal(-1.00000000000000))*(x317)*(x322)))+(((IkReal(-1.00000000000000))*(x314)*(x319))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((x316)*(x318)))+(((x316)*(x321)))+(((IkReal(-1.00000000000000))*(x316)*(x322)))+(((cj1)*(x320)))+(((x313)*(x314)))+(((IkReal(-1.00000000000000))*(cj1)*(x317)))+(((x313)*(x315))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst19)*(((((x317)*(x318)))+(((cj1)*(x316)))+(((IkReal(-1.00000000000000))*(sj1)*(x320)))+(((x317)*(x321)))+(((IkReal(-1.00000000000000))*(x315)*(x319)))+(((IkReal(-1.00000000000000))*(x317)*(x322)))+(((IkReal(-1.00000000000000))*(x314)*(x319)))))), ((gconst19)*(((((x316)*(x318)))+(((x316)*(x321)))+(((IkReal(-1.00000000000000))*(x316)*(x322)))+(((cj1)*(x320)))+(((x313)*(x314)))+(((IkReal(-1.00000000000000))*(cj1)*(x317)))+(((x313)*(x315)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x323=IKsin(j2);
IkReal x324=IKcos(j2);
IkReal x325=((IkReal(0.0950000000000000))*(cj5));
IkReal x326=((sj0)*(sj5));
IkReal x327=((IkReal(1.00000000000000))*(sj4));
IkReal x328=((IkReal(0.350000000000000))*(sj1));
IkReal x329=((cj5)*(r00));
IkReal x330=((IkReal(0.0950000000000000))*(sj5));
IkReal x331=((cj5)*(r20));
IkReal x332=((cj0)*(r01));
IkReal x333=((IkReal(1.00000000000000))*(sj0));
IkReal x334=((cj5)*(r10));
IkReal x335=((IkReal(0.350000000000000))*(cj1));
IkReal x336=((r21)*(sj5));
IkReal x337=((sj1)*(x323));
IkReal x338=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x339=((IkReal(1.00000000000000))*(x324));
IkReal x340=((cj1)*(x323));
IkReal x341=((cj1)*(x339));
evalcond[0]=((((IkReal(-1.00000000000000))*(x324)*(x335)))+(((r21)*(x325)))+(pz)+(((IkReal(-1.00000000000000))*(x335)))+(((x323)*(x328)))+(((r20)*(x330))));
evalcond[1]=((((sj4)*(x336)))+(((cj4)*(r22)))+(x337)+(((IkReal(-1.00000000000000))*(x341)))+(((IkReal(-1.00000000000000))*(x327)*(x331))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj1)*(x339)))+(((IkReal(-1.00000000000000))*(x340)))+(((IkReal(-1.00000000000000))*(cj4)*(x336)))+(((r22)*(sj4)))+(((cj4)*(x331))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((x324)*(x328)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x325)))+(((IkReal(-1.00000000000000))*(py)*(x333)))+(((IkReal(-1.00000000000000))*(x325)*(x332)))+(((IkReal(-0.0950000000000000))*(r10)*(x326)))+(x328)+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x330)))+(((x323)*(x335))));
evalcond[4]=((((sj0)*(sj4)*(x334)))+(((IkReal(-1.00000000000000))*(sj5)*(x327)*(x332)))+(((IkReal(-1.00000000000000))*(r02)*(x338)))+(x340)+(((IkReal(-1.00000000000000))*(r11)*(x326)*(x327)))+(((cj0)*(sj4)*(x329)))+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x333)))+(((sj1)*(x324))));
evalcond[5]=((((cj4)*(sj5)*(x332)))+(((IkReal(-1.00000000000000))*(cj4)*(x333)*(x334)))+(x337)+(((cj4)*(r11)*(x326)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x327)))+(((IkReal(-1.00000000000000))*(x329)*(x338)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x327)))+(((IkReal(-1.00000000000000))*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x342=((cj1)*(cj4));
IkReal x343=((r21)*(sj5));
IkReal x344=((r22)*(sj1));
IkReal x345=((IkReal(1.00000000000000))*(cj4));
IkReal x346=((cj1)*(sj4));
IkReal x347=((sj1)*(sj4));
IkReal x348=((cj5)*(r20));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(x343)*(x347)))+(((IkReal(-1.00000000000000))*(x344)*(x345)))+(((x342)*(x348)))+(((IkReal(-1.00000000000000))*(x342)*(x343)))+(((x347)*(x348)))+(((r22)*(x346))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((r22)*(x342)))+(((IkReal(-1.00000000000000))*(x346)*(x348)))+(((IkReal(-1.00000000000000))*(sj1)*(x343)*(x345)))+(((sj4)*(x344)))+(((x343)*(x346)))+(((cj4)*(sj1)*(x348))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(x343)*(x347)))+(((IkReal(-1.00000000000000))*(x344)*(x345)))+(((x342)*(x348)))+(((IkReal(-1.00000000000000))*(x342)*(x343)))+(((x347)*(x348)))+(((r22)*(x346)))))), ((gconst18)*(((((r22)*(x342)))+(((IkReal(-1.00000000000000))*(x346)*(x348)))+(((IkReal(-1.00000000000000))*(sj1)*(x343)*(x345)))+(((sj4)*(x344)))+(((x343)*(x346)))+(((cj4)*(sj1)*(x348)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x349=IKsin(j2);
IkReal x350=IKcos(j2);
IkReal x351=((IkReal(0.0950000000000000))*(cj5));
IkReal x352=((sj0)*(sj5));
IkReal x353=((IkReal(1.00000000000000))*(sj4));
IkReal x354=((IkReal(0.350000000000000))*(sj1));
IkReal x355=((cj5)*(r00));
IkReal x356=((IkReal(0.0950000000000000))*(sj5));
IkReal x357=((cj5)*(r20));
IkReal x358=((cj0)*(r01));
IkReal x359=((IkReal(1.00000000000000))*(sj0));
IkReal x360=((cj5)*(r10));
IkReal x361=((IkReal(0.350000000000000))*(cj1));
IkReal x362=((r21)*(sj5));
IkReal x363=((sj1)*(x349));
IkReal x364=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x365=((IkReal(1.00000000000000))*(x350));
IkReal x366=((cj1)*(x349));
IkReal x367=((cj1)*(x365));
evalcond[0]=((((x349)*(x354)))+(((IkReal(-1.00000000000000))*(x361)))+(((r20)*(x356)))+(((IkReal(-1.00000000000000))*(x350)*(x361)))+(pz)+(((r21)*(x351))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x367)))+(x363)+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(x353)*(x357)))+(((sj4)*(x362))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x366)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(sj1)*(x365)))+(((IkReal(-1.00000000000000))*(cj4)*(x362)))+(((cj4)*(x357))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(py)*(x359)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x356)))+(((x349)*(x361)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x351)))+(((IkReal(-0.0950000000000000))*(r10)*(x352)))+(((x350)*(x354)))+(x354)+(((IkReal(-1.00000000000000))*(x351)*(x358))));
evalcond[4]=((x366)+(((cj0)*(sj4)*(x355)))+(((IkReal(-1.00000000000000))*(r11)*(x352)*(x353)))+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x359)))+(((IkReal(-1.00000000000000))*(sj5)*(x353)*(x358)))+(((IkReal(-1.00000000000000))*(r02)*(x364)))+(((sj0)*(sj4)*(x360)))+(((sj1)*(x350))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x355)*(x364)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x353)))+(((cj4)*(r11)*(x352)))+(((IkReal(-1.00000000000000))*(cj4)*(x359)*(x360)))+(x363)+(((cj4)*(sj5)*(x358)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x353))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x368=((IkReal(20.0000000000000))*(cj1));
IkReal x369=((cj0)*(px));
IkReal x370=((py)*(sj0));
IkReal x371=((IkReal(20.0000000000000))*(sj1));
IkReal x372=((IkReal(1.90000000000000))*(sj1));
IkReal x373=((cj0)*(r00));
IkReal x374=((IkReal(1.90000000000000))*(cj1));
IkReal x375=((r10)*(sj0));
IkReal x376=((IkReal(1.90000000000000))*(cj5)*(r21));
IkReal x377=((sj5)*(x374));
IkReal x378=((cj0)*(cj5)*(r01));
IkReal x379=((cj5)*(r11)*(sj0));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x373)*(x377)))+(((IkReal(-1.00000000000000))*(x368)*(x369)))+(((pz)*(x371)))+(((cj5)*(r21)*(x372)))+(((IkReal(-1.00000000000000))*(x375)*(x377)))+(((r20)*(sj5)*(x372)))+(((IkReal(-1.00000000000000))*(x374)*(x379)))+(((IkReal(-1.00000000000000))*(x374)*(x378)))+(((IkReal(-1.00000000000000))*(x368)*(x370))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x372)*(x379)))+(((IkReal(-1.00000000000000))*(pz)*(x368)))+(((IkReal(-1.00000000000000))*(sj5)*(x372)*(x375)))+(((IkReal(-1.00000000000000))*(x372)*(x378)))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(sj5)*(x372)*(x373)))+(((IkReal(-1.00000000000000))*(r20)*(x377)))+(((IkReal(-1.00000000000000))*(x369)*(x371)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)*(x374))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(x373)*(x377)))+(((IkReal(-1.00000000000000))*(x368)*(x369)))+(((pz)*(x371)))+(((cj5)*(r21)*(x372)))+(((IkReal(-1.00000000000000))*(x375)*(x377)))+(((r20)*(sj5)*(x372)))+(((IkReal(-1.00000000000000))*(x374)*(x379)))+(((IkReal(-1.00000000000000))*(x374)*(x378)))+(((IkReal(-1.00000000000000))*(x368)*(x370)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(x372)*(x379)))+(((IkReal(-1.00000000000000))*(pz)*(x368)))+(((IkReal(-1.00000000000000))*(sj5)*(x372)*(x375)))+(((IkReal(-1.00000000000000))*(x372)*(x378)))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(sj5)*(x372)*(x373)))+(((IkReal(-1.00000000000000))*(r20)*(x377)))+(((IkReal(-1.00000000000000))*(x369)*(x371)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)*(x374)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x380=IKsin(j2);
IkReal x381=IKcos(j2);
IkReal x382=((IkReal(0.350000000000000))*(cj1));
IkReal x383=((IkReal(0.0950000000000000))*(cj5));
IkReal x384=((IkReal(0.0950000000000000))*(sj5));
IkReal x385=((IkReal(0.350000000000000))*(sj1));
evalcond[0]=((((r21)*(x383)))+(((IkReal(-1.00000000000000))*(x381)*(x382)))+(((IkReal(-1.00000000000000))*(x382)))+(pz)+(((x380)*(x385)))+(((r20)*(x384))));
evalcond[1]=((((x381)*(x385)))+(((IkReal(-1.00000000000000))*(cj0)*(px)))+(x385)+(((x380)*(x382)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x384)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x384)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x383)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x383))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))));
dummyeval[0]=(((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
IkReal x386=((IkReal(1.00000000000000))*(sj0));
IkReal x387=((cj5)*(r22));
IkReal x388=((r21)*(sj5));
IkReal x389=((IkReal(1.00000000000000))*(cj0));
IkReal x390=((r22)*(sj5));
IkReal x391=((cj5)*(r20));
gconst21=IKsign(((((r02)*(sj0)*(x391)))+(((cj0)*(r12)*(x388)))+(((IkReal(-1.00000000000000))*(r12)*(x389)*(x391)))+(((IkReal(-1.00000000000000))*(r11)*(x389)*(x390)))+(((IkReal(-1.00000000000000))*(r02)*(x386)*(x388)))+(((IkReal(-1.00000000000000))*(r00)*(x386)*(x387)))+(((r01)*(sj0)*(x390)))+(((cj0)*(r10)*(x387)))));
IkReal x392=((IkReal(1.00000000000000))*(sj0));
IkReal x393=((cj5)*(r22));
IkReal x394=((r21)*(sj5));
IkReal x395=((IkReal(1.00000000000000))*(cj0));
IkReal x396=((r22)*(sj5));
IkReal x397=((cj5)*(r20));
dummyeval[0]=((((r01)*(sj0)*(x396)))+(((IkReal(-1.00000000000000))*(r02)*(x392)*(x394)))+(((IkReal(-1.00000000000000))*(r11)*(x395)*(x396)))+(((IkReal(-1.00000000000000))*(r12)*(x395)*(x397)))+(((r02)*(sj0)*(x397)))+(((cj0)*(r10)*(x393)))+(((cj0)*(r12)*(x394)))+(((IkReal(-1.00000000000000))*(r00)*(x392)*(x393))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x398=((cj1)*(cj2));
IkReal x399=((cj5)*(r00));
IkReal x400=((IkReal(1.00000000000000))*(sj0));
IkReal x401=((sj1)*(sj2));
IkReal x402=((cj0)*(r12));
IkReal x403=((r01)*(sj5));
IkReal x404=((cj0)*(cj5)*(r10));
IkReal x405=((sj0)*(x401));
IkReal x406=((cj0)*(r11)*(sj5));
if( IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(r02)*(x398)*(x400)))+(((x398)*(x402)))+(((r02)*(x405)))+(((IkReal(-1.00000000000000))*(x401)*(x402))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((x401)*(x406)))+(((IkReal(-1.00000000000000))*(x398)*(x399)*(x400)))+(((x399)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x401)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x406)))+(((x398)*(x404)))+(((sj0)*(x398)*(x403)))+(((IkReal(-1.00000000000000))*(x401)*(x404))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((IkReal(-1.00000000000000))*(r02)*(x398)*(x400)))+(((x398)*(x402)))+(((r02)*(x405)))+(((IkReal(-1.00000000000000))*(x401)*(x402)))))), ((gconst21)*(((((x401)*(x406)))+(((IkReal(-1.00000000000000))*(x398)*(x399)*(x400)))+(((x399)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x401)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x406)))+(((x398)*(x404)))+(((sj0)*(x398)*(x403)))+(((IkReal(-1.00000000000000))*(x401)*(x404)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x407=IKsin(j4);
IkReal x408=IKcos(j4);
IkReal x409=((sj1)*(sj2));
IkReal x410=((r12)*(sj0));
IkReal x411=((r11)*(sj5));
IkReal x412=((cj0)*(r12));
IkReal x413=((cj5)*(sj0));
IkReal x414=((cj0)*(r02));
IkReal x415=((IkReal(1.00000000000000))*(cj1));
IkReal x416=((r21)*(sj5));
IkReal x417=((cj0)*(cj5));
IkReal x418=((cj2)*(sj1));
IkReal x419=((r01)*(sj5));
IkReal x420=((cj5)*(r20));
IkReal x421=((cj2)*(x415));
IkReal x422=((IkReal(1.00000000000000))*(x407));
IkReal x423=((IkReal(1.00000000000000))*(x408));
IkReal x424=((sj0)*(x408));
IkReal x425=((r10)*(x407));
IkReal x426=((cj0)*(x408));
IkReal x427=((sj0)*(x407));
evalcond[0]=((((IkReal(-1.00000000000000))*(x420)*(x422)))+(((x407)*(x416)))+(((r22)*(x408)))+(((IkReal(-1.00000000000000))*(x421)))+(x409));
evalcond[1]=((((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(sj2)*(x415)))+(((IkReal(-1.00000000000000))*(x416)*(x423)))+(((x408)*(x420)))+(((r22)*(x407))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x413)*(x422)))+(((x417)*(x425)))+(((IkReal(-1.00000000000000))*(x412)*(x423)))+(((r02)*(x424)))+(((IkReal(-1.00000000000000))*(cj0)*(x411)*(x422)))+(((x419)*(x427))));
evalcond[3]=((((r02)*(x427)))+(((r00)*(x408)*(x413)))+(((IkReal(-1.00000000000000))*(x412)*(x422)))+(((IkReal(-1.00000000000000))*(r10)*(x417)*(x423)))+(((x411)*(x426)))+(((IkReal(-1.00000000000000))*(sj0)*(x419)*(x423))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x414)*(x423)))+(((cj1)*(sj2)))+(((x413)*(x425)))+(((r00)*(x407)*(x417)))+(((IkReal(-1.00000000000000))*(x410)*(x423)))+(((IkReal(-1.00000000000000))*(cj0)*(x419)*(x422)))+(((IkReal(-1.00000000000000))*(sj0)*(x411)*(x422)))+(x418));
evalcond[5]=((((IkReal(-1.00000000000000))*(r00)*(x417)*(x423)))+(((IkReal(-1.00000000000000))*(x414)*(x422)))+(((x411)*(x424)))+(((IkReal(-1.00000000000000))*(x421)))+(((x419)*(x426)))+(x409)+(((IkReal(-1.00000000000000))*(x410)*(x422)))+(((IkReal(-1.00000000000000))*(r10)*(x413)*(x423))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x428=((cj1)*(sj2));
IkReal x429=((cj5)*(r20));
IkReal x430=((sj1)*(sj2));
IkReal x431=((cj1)*(cj2));
IkReal x432=((cj2)*(sj1));
IkReal x433=((IkReal(1.00000000000000))*(r21)*(sj5));
if( IKabs(((gconst20)*(((((r22)*(x428)))+(((IkReal(-1.00000000000000))*(x429)*(x431)))+(((x429)*(x430)))+(((IkReal(-1.00000000000000))*(x430)*(x433)))+(((r21)*(sj5)*(x431)))+(((r22)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((r22)*(x431)))+(((x428)*(x429)))+(((IkReal(-1.00000000000000))*(x428)*(x433)))+(((IkReal(-1.00000000000000))*(r22)*(x430)))+(((IkReal(-1.00000000000000))*(x432)*(x433)))+(((x429)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((r22)*(x428)))+(((IkReal(-1.00000000000000))*(x429)*(x431)))+(((x429)*(x430)))+(((IkReal(-1.00000000000000))*(x430)*(x433)))+(((r21)*(sj5)*(x431)))+(((r22)*(x432)))))), ((gconst20)*(((((r22)*(x431)))+(((x428)*(x429)))+(((IkReal(-1.00000000000000))*(x428)*(x433)))+(((IkReal(-1.00000000000000))*(r22)*(x430)))+(((IkReal(-1.00000000000000))*(x432)*(x433)))+(((x429)*(x432)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x434=IKsin(j4);
IkReal x435=IKcos(j4);
IkReal x436=((sj1)*(sj2));
IkReal x437=((r12)*(sj0));
IkReal x438=((r11)*(sj5));
IkReal x439=((cj0)*(r12));
IkReal x440=((cj5)*(sj0));
IkReal x441=((cj0)*(r02));
IkReal x442=((IkReal(1.00000000000000))*(cj1));
IkReal x443=((r21)*(sj5));
IkReal x444=((cj0)*(cj5));
IkReal x445=((cj2)*(sj1));
IkReal x446=((r01)*(sj5));
IkReal x447=((cj5)*(r20));
IkReal x448=((cj2)*(x442));
IkReal x449=((IkReal(1.00000000000000))*(x434));
IkReal x450=((IkReal(1.00000000000000))*(x435));
IkReal x451=((sj0)*(x435));
IkReal x452=((r10)*(x434));
IkReal x453=((cj0)*(x435));
IkReal x454=((sj0)*(x434));
evalcond[0]=((x436)+(((IkReal(-1.00000000000000))*(x448)))+(((x434)*(x443)))+(((IkReal(-1.00000000000000))*(x447)*(x449)))+(((r22)*(x435))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x445)))+(((r22)*(x434)))+(((IkReal(-1.00000000000000))*(x443)*(x450)))+(((x435)*(x447)))+(((IkReal(-1.00000000000000))*(sj2)*(x442))));
evalcond[2]=((((x444)*(x452)))+(((IkReal(-1.00000000000000))*(r00)*(x440)*(x449)))+(((IkReal(-1.00000000000000))*(cj0)*(x438)*(x449)))+(((IkReal(-1.00000000000000))*(x439)*(x450)))+(((x446)*(x454)))+(((r02)*(x451))));
evalcond[3]=((((r00)*(x435)*(x440)))+(((IkReal(-1.00000000000000))*(r10)*(x444)*(x450)))+(((x438)*(x453)))+(((IkReal(-1.00000000000000))*(x439)*(x449)))+(((IkReal(-1.00000000000000))*(sj0)*(x446)*(x450)))+(((r02)*(x454))));
evalcond[4]=((((cj1)*(sj2)))+(x445)+(((r00)*(x434)*(x444)))+(((IkReal(-1.00000000000000))*(x441)*(x450)))+(((IkReal(-1.00000000000000))*(x437)*(x450)))+(((x440)*(x452)))+(((IkReal(-1.00000000000000))*(cj0)*(x446)*(x449)))+(((IkReal(-1.00000000000000))*(sj0)*(x438)*(x449))));
evalcond[5]=((x436)+(((IkReal(-1.00000000000000))*(r00)*(x444)*(x450)))+(((x438)*(x451)))+(((IkReal(-1.00000000000000))*(x441)*(x449)))+(((IkReal(-1.00000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(r10)*(x440)*(x450)))+(((x446)*(x453)))+(((IkReal(-1.00000000000000))*(x437)*(x449))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x455=((cj0)*(sj3));
IkReal x456=((sj0)*(sj3));
if( IKabs(((gconst3)*(((((r02)*(x456)))+(((IkReal(-1.00000000000000))*(r12)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj5)*(r00)*(x456)))+(((r11)*(sj5)*(x455)))+(((IkReal(-1.00000000000000))*(r01)*(sj5)*(x456)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((r02)*(x456)))+(((IkReal(-1.00000000000000))*(r12)*(x455)))))), ((gconst3)*(((((cj5)*(r00)*(x456)))+(((r11)*(sj5)*(x455)))+(((IkReal(-1.00000000000000))*(r01)*(sj5)*(x456)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x455)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x457=IKsin(j4);
IkReal x458=IKcos(j4);
IkReal x459=((IkReal(1.00000000000000))*(cj0));
IkReal x460=((IkReal(1.00000000000000))*(sj0));
IkReal x461=((r02)*(sj0));
IkReal x462=((cj5)*(x458));
IkReal x463=((sj5)*(x457));
IkReal x464=((sj5)*(x458));
IkReal x465=((cj5)*(x457));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x460)*(x465)))+(((r01)*(sj0)*(x463)))+(((cj0)*(r10)*(x465)))+(((IkReal(-1.00000000000000))*(r11)*(x459)*(x463)))+(((x458)*(x461)))+(((IkReal(-1.00000000000000))*(r12)*(x458)*(x459))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x460)*(x464)))+(((cj0)*(r11)*(x464)))+(sj3)+(((x457)*(x461)))+(((IkReal(-1.00000000000000))*(r12)*(x457)*(x459)))+(((r00)*(sj0)*(x462)))+(((IkReal(-1.00000000000000))*(r10)*(x459)*(x462))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((sj3)*((sj1)*(sj1))))+(((sj3)*((cj1)*(cj1))))));
dummyeval[0]=((((sj3)*((sj1)*(sj1))))+(((sj3)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
IkReal x466=((IkReal(7.00000000000000))*(sj3));
gconst5=IKsign(((((x466)*((sj1)*(sj1))))+(((x466)*((cj1)*(cj1))))));
dummyeval[0]=((((sj3)*((sj1)*(sj1))))+(((sj3)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x467=((r01)*(sj0));
IkReal x468=((IkReal(0.0950000000000000))*(cj5));
IkReal x469=((IkReal(1.00000000000000))*(r10));
IkReal x470=((sj0)*(sj5));
IkReal x471=((r02)*(sj0));
IkReal x472=((cj0)*(cj4));
IkReal x473=((IkReal(1.00000000000000))*(sj5));
IkReal x474=((cj0)*(r11));
IkReal x475=((cj0)*(sj5));
IkReal x476=((IkReal(1.00000000000000))*(r12));
IkReal x477=((IkReal(1.00000000000000))*(cj5));
IkReal x478=((r00)*(sj0));
IkReal x479=((cj0)*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r20)*(sj5)))+(((cj5)*(r21))));
evalcond[2]=((IkReal(1.00000000000000))+(((cj5)*(x467)))+(((IkReal(-1.00000000000000))*(x469)*(x475)))+(((IkReal(-1.00000000000000))*(x474)*(x477)))+(((r00)*(x470))));
evalcond[3]=((((IkReal(-0.0950000000000000))*(r10)*(x475)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))+(((x467)*(x468)))+(((IkReal(-1.00000000000000))*(x468)*(x474)))+(((px)*(sj0)))+(((IkReal(0.0950000000000000))*(r00)*(x470))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(sj0)*(x477)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x477)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x473)))+(((IkReal(-1.00000000000000))*(x469)*(x470))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj4)*(x477)*(x478)))+(((IkReal(-1.00000000000000))*(x472)*(x476)))+(((cj5)*(r10)*(x479)))+(((cj4)*(x471)))+(((sj4)*(sj5)*(x467)))+(((IkReal(-1.00000000000000))*(sj4)*(x473)*(x474))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x476)*(x479)))+(((IkReal(-1.00000000000000))*(cj5)*(x469)*(x472)))+(((r11)*(sj5)*(x472)))+(((IkReal(-1.00000000000000))*(cj4)*(x467)*(x473)))+(((sj4)*(x471)))+(((cj4)*(cj5)*(x478))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x480=((IkReal(1.90000000000000))*(cj1));
IkReal x481=((cj5)*(r21));
IkReal x482=((r20)*(sj5));
IkReal x483=((IkReal(7.00000000000000))*(cj1));
IkReal x484=((r22)*(sj4));
IkReal x485=((IkReal(7.00000000000000))*(sj1));
IkReal x486=((IkReal(1.90000000000000))*(sj1));
IkReal x487=((IkReal(20.0000000000000))*(pz));
IkReal x488=((cj4)*(cj5)*(r20));
IkReal x489=((cj4)*(r21)*(sj5));
if( IKabs(((gconst7)*(((((x481)*(x486)))+(((x482)*(x486)))+(((x483)*(x484)))+(((IkReal(-1.00000000000000))*(sj1)*(x483)))+(((IkReal(-1.00000000000000))*(x483)*(x489)))+(((sj1)*(x487)))+(((x483)*(x488))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(x480)*(x481)))+(((x485)*(x488)))+(((cj1)*(x483)))+(((x484)*(x485)))+(((IkReal(-1.00000000000000))*(cj1)*(x487)))+(((IkReal(-1.00000000000000))*(x480)*(x482)))+(((IkReal(-1.00000000000000))*(x485)*(x489))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst7)*(((((x481)*(x486)))+(((x482)*(x486)))+(((x483)*(x484)))+(((IkReal(-1.00000000000000))*(sj1)*(x483)))+(((IkReal(-1.00000000000000))*(x483)*(x489)))+(((sj1)*(x487)))+(((x483)*(x488)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(x480)*(x481)))+(((x485)*(x488)))+(((cj1)*(x483)))+(((x484)*(x485)))+(((IkReal(-1.00000000000000))*(cj1)*(x487)))+(((IkReal(-1.00000000000000))*(x480)*(x482)))+(((IkReal(-1.00000000000000))*(x485)*(x489)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x490=IKsin(j2);
IkReal x491=IKcos(j2);
IkReal x492=((IkReal(0.0950000000000000))*(cj5));
IkReal x493=((sj0)*(sj5));
IkReal x494=((IkReal(1.00000000000000))*(sj4));
IkReal x495=((IkReal(0.350000000000000))*(sj1));
IkReal x496=((cj5)*(r00));
IkReal x497=((IkReal(0.0950000000000000))*(sj5));
IkReal x498=((cj5)*(r20));
IkReal x499=((cj0)*(r01));
IkReal x500=((IkReal(1.00000000000000))*(sj0));
IkReal x501=((cj5)*(r10));
IkReal x502=((r21)*(sj5));
IkReal x503=((sj1)*(x491));
IkReal x504=((cj1)*(x490));
IkReal x505=((cj1)*(x491));
IkReal x506=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x507=((sj1)*(x490));
IkReal x508=((x503)+(x504));
evalcond[0]=((((r20)*(x497)))+(((x490)*(x495)))+(((IkReal(-0.350000000000000))*(cj1)))+(((IkReal(-0.350000000000000))*(x505)))+(((r21)*(x492)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(x505)))+(((sj4)*(x502)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(x494)*(x498)))+(x507));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x502)))+(((r22)*(sj4)))+(((cj4)*(x498)))+(x508));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((x491)*(x495)))+(((IkReal(-0.0950000000000000))*(r10)*(x493)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x492)))+(((IkReal(-1.00000000000000))*(py)*(x500)))+(x495)+(((IkReal(-1.00000000000000))*(x492)*(x499)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x497)))+(((IkReal(0.350000000000000))*(x504))));
evalcond[4]=((((cj0)*(sj4)*(x496)))+(((IkReal(-1.00000000000000))*(sj5)*(x494)*(x499)))+(((IkReal(-1.00000000000000))*(r02)*(x506)))+(((IkReal(-1.00000000000000))*(r11)*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x500)))+(((sj0)*(sj4)*(x501)))+(x508));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x500)*(x501)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x494)))+(((cj4)*(sj5)*(x499)))+(((IkReal(-1.00000000000000))*(x496)*(x506)))+(((cj4)*(r11)*(x493)))+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x494)))+(x505));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x509=((r21)*(sj5));
IkReal x510=((sj1)*(sj4));
IkReal x511=((IkReal(1.00000000000000))*(sj1));
IkReal x512=((cj4)*(sj1));
IkReal x513=((cj1)*(sj4));
IkReal x514=((cj5)*(r20));
IkReal x515=((IkReal(1.00000000000000))*(cj1)*(cj4));
IkReal x516=((sj4)*(x514));
if( IKabs(((gconst6)*(((((x509)*(x510)))+(((IkReal(-1.00000000000000))*(x509)*(x515)))+(((r22)*(x512)))+(((IkReal(-1.00000000000000))*(x510)*(x514)))+(((cj1)*(cj4)*(x514)))+(((r22)*(x513))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x509)*(x513)))+(((IkReal(-1.00000000000000))*(r22)*(x515)))+(((r22)*(x510)))+(((x512)*(x514)))+(((x513)*(x514)))+(((IkReal(-1.00000000000000))*(cj4)*(x509)*(x511))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((x509)*(x510)))+(((IkReal(-1.00000000000000))*(x509)*(x515)))+(((r22)*(x512)))+(((IkReal(-1.00000000000000))*(x510)*(x514)))+(((cj1)*(cj4)*(x514)))+(((r22)*(x513)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(x509)*(x513)))+(((IkReal(-1.00000000000000))*(r22)*(x515)))+(((r22)*(x510)))+(((x512)*(x514)))+(((x513)*(x514)))+(((IkReal(-1.00000000000000))*(cj4)*(x509)*(x511)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x517=IKsin(j2);
IkReal x518=IKcos(j2);
IkReal x519=((IkReal(0.0950000000000000))*(cj5));
IkReal x520=((sj0)*(sj5));
IkReal x521=((IkReal(1.00000000000000))*(sj4));
IkReal x522=((IkReal(0.350000000000000))*(sj1));
IkReal x523=((cj5)*(r00));
IkReal x524=((IkReal(0.0950000000000000))*(sj5));
IkReal x525=((cj5)*(r20));
IkReal x526=((cj0)*(r01));
IkReal x527=((IkReal(1.00000000000000))*(sj0));
IkReal x528=((cj5)*(r10));
IkReal x529=((r21)*(sj5));
IkReal x530=((sj1)*(x518));
IkReal x531=((cj1)*(x517));
IkReal x532=((cj1)*(x518));
IkReal x533=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x534=((sj1)*(x517));
IkReal x535=((x531)+(x530));
evalcond[0]=((((IkReal(-0.350000000000000))*(cj1)))+(((r20)*(x524)))+(((IkReal(-0.350000000000000))*(x532)))+(((r21)*(x519)))+(pz)+(((x517)*(x522))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x521)*(x525)))+(((cj4)*(r22)))+(((sj4)*(x529)))+(((IkReal(-1.00000000000000))*(x532)))+(x534));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x529)))+(((r22)*(sj4)))+(((cj4)*(x525)))+(x535));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(x519)*(x526)))+(((IkReal(0.350000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(py)*(x527)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x524)))+(((x518)*(x522)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x519)))+(x522)+(((IkReal(-0.0950000000000000))*(r10)*(x520))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r02)*(x533)))+(((IkReal(-1.00000000000000))*(r11)*(x520)*(x521)))+(((sj0)*(sj4)*(x528)))+(((cj0)*(sj4)*(x523)))+(((IkReal(-1.00000000000000))*(sj5)*(x521)*(x526)))+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x527)))+(x535));
evalcond[5]=((((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x521)))+(((cj4)*(sj5)*(x526)))+(((IkReal(-1.00000000000000))*(x523)*(x533)))+(((IkReal(-1.00000000000000))*(cj4)*(x527)*(x528)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x521)))+(((cj4)*(r11)*(x520)))+(x532));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x536=((r01)*(sj0));
IkReal x537=((IkReal(0.0950000000000000))*(cj5));
IkReal x538=((IkReal(1.00000000000000))*(r10));
IkReal x539=((sj0)*(sj5));
IkReal x540=((r02)*(sj0));
IkReal x541=((cj0)*(cj4));
IkReal x542=((IkReal(1.00000000000000))*(sj5));
IkReal x543=((cj0)*(r11));
IkReal x544=((cj0)*(sj5));
IkReal x545=((IkReal(1.00000000000000))*(r12));
IkReal x546=((IkReal(1.00000000000000))*(cj5));
IkReal x547=((r00)*(sj0));
IkReal x548=((cj0)*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j3, IkReal(6.28318530717959))));
evalcond[1]=((((r20)*(sj5)))+(((cj5)*(r21))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x538)*(x544)))+(((IkReal(-1.00000000000000))*(x543)*(x546)))+(((cj5)*(x536)))+(((r00)*(x539))));
evalcond[3]=((((IkReal(-0.0950000000000000))*(r10)*(x544)))+(((x536)*(x537)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))+(((IkReal(-1.00000000000000))*(x537)*(x543)))+(((IkReal(0.0950000000000000))*(r00)*(x539)))+(((px)*(sj0))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(sj0)*(x546)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x542)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x546)))+(((IkReal(-1.00000000000000))*(x538)*(x539))));
evalcond[5]=((((cj5)*(r10)*(x548)))+(((IkReal(-1.00000000000000))*(sj4)*(x542)*(x543)))+(((sj4)*(sj5)*(x536)))+(((IkReal(-1.00000000000000))*(x541)*(x545)))+(((cj4)*(x540)))+(((IkReal(-1.00000000000000))*(sj4)*(x546)*(x547))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj4)*(x536)*(x542)))+(((IkReal(-1.00000000000000))*(cj5)*(x538)*(x541)))+(((sj4)*(x540)))+(((cj4)*(cj5)*(x547)))+(((IkReal(-1.00000000000000))*(x545)*(x548)))+(((r11)*(sj5)*(x541))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((cj1)*(cj1))+((sj1)*(sj1))));
dummyeval[0]=(((cj1)*(cj1))+((sj1)*(sj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))));
dummyeval[0]=(((cj1)*(cj1))+((sj1)*(sj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x549=((IkReal(1.90000000000000))*(cj1));
IkReal x550=((cj5)*(r21));
IkReal x551=((IkReal(7.00000000000000))*(sj1));
IkReal x552=((r20)*(sj5));
IkReal x553=((IkReal(7.00000000000000))*(cj1));
IkReal x554=((r22)*(sj4));
IkReal x555=((IkReal(1.90000000000000))*(sj1));
IkReal x556=((IkReal(20.0000000000000))*(pz));
IkReal x557=((cj4)*(cj5)*(r20));
IkReal x558=((cj4)*(r21)*(sj5));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(x552)*(x555)))+(((cj1)*(x551)))+(((IkReal(-1.00000000000000))*(x550)*(x555)))+(((IkReal(-1.00000000000000))*(x553)*(x558)))+(((IkReal(-1.00000000000000))*(sj1)*(x556)))+(((x553)*(x554)))+(((x553)*(x557))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((x549)*(x550)))+(((IkReal(-1.00000000000000))*(x551)*(x558)))+(((x551)*(x554)))+(((IkReal(-1.00000000000000))*(cj1)*(x553)))+(((x551)*(x557)))+(((x549)*(x552)))+(((cj1)*(x556))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(x552)*(x555)))+(((cj1)*(x551)))+(((IkReal(-1.00000000000000))*(x550)*(x555)))+(((IkReal(-1.00000000000000))*(x553)*(x558)))+(((IkReal(-1.00000000000000))*(sj1)*(x556)))+(((x553)*(x554)))+(((x553)*(x557)))))), ((gconst9)*(((((x549)*(x550)))+(((IkReal(-1.00000000000000))*(x551)*(x558)))+(((x551)*(x554)))+(((IkReal(-1.00000000000000))*(cj1)*(x553)))+(((x551)*(x557)))+(((x549)*(x552)))+(((cj1)*(x556)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x559=IKsin(j2);
IkReal x560=IKcos(j2);
IkReal x561=((IkReal(0.0950000000000000))*(cj5));
IkReal x562=((sj0)*(sj5));
IkReal x563=((IkReal(1.00000000000000))*(sj4));
IkReal x564=((IkReal(0.350000000000000))*(sj1));
IkReal x565=((cj5)*(r00));
IkReal x566=((IkReal(0.0950000000000000))*(sj5));
IkReal x567=((cj5)*(r20));
IkReal x568=((cj0)*(r01));
IkReal x569=((IkReal(1.00000000000000))*(sj0));
IkReal x570=((cj5)*(r10));
IkReal x571=((IkReal(0.350000000000000))*(cj1));
IkReal x572=((r21)*(sj5));
IkReal x573=((sj1)*(x559));
IkReal x574=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x575=((IkReal(1.00000000000000))*(x560));
IkReal x576=((cj1)*(x559));
IkReal x577=((cj1)*(x575));
evalcond[0]=((((IkReal(-1.00000000000000))*(x560)*(x571)))+(((x559)*(x564)))+(((r21)*(x561)))+(((r20)*(x566)))+(((IkReal(-1.00000000000000))*(x571)))+(pz));
evalcond[1]=((x573)+(((sj4)*(x572)))+(((IkReal(-1.00000000000000))*(x563)*(x567)))+(((IkReal(-1.00000000000000))*(x577)))+(((cj4)*(r22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x572)))+(((IkReal(-1.00000000000000))*(sj1)*(x575)))+(((cj4)*(x567)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(x576))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((x560)*(x564)))+(x564)+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x561)))+(((IkReal(-0.0950000000000000))*(r10)*(x562)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x566)))+(((IkReal(-1.00000000000000))*(x561)*(x568)))+(((IkReal(-1.00000000000000))*(py)*(x569)))+(((x559)*(x571))));
evalcond[4]=((x576)+(((cj0)*(sj4)*(x565)))+(((IkReal(-1.00000000000000))*(sj5)*(x563)*(x568)))+(((IkReal(-1.00000000000000))*(r11)*(x562)*(x563)))+(((sj0)*(sj4)*(x570)))+(((IkReal(-1.00000000000000))*(r02)*(x574)))+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x569)))+(((sj1)*(x560))));
evalcond[5]=((x573)+(((IkReal(-1.00000000000000))*(x565)*(x574)))+(((IkReal(-1.00000000000000))*(x577)))+(((cj4)*(sj5)*(x568)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x563)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x563)))+(((IkReal(-1.00000000000000))*(cj4)*(x569)*(x570)))+(((cj4)*(r11)*(x562))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x578=((IkReal(1.00000000000000))*(cj4));
IkReal x579=((r22)*(sj1));
IkReal x580=((cj1)*(r22));
IkReal x581=((sj1)*(sj4));
IkReal x582=((cj5)*(r20));
IkReal x583=((r21)*(sj5));
IkReal x584=((cj1)*(x583));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x581)*(x583)))+(((sj4)*(x580)))+(((cj1)*(cj4)*(x582)))+(((IkReal(-1.00000000000000))*(x578)*(x579)))+(((x581)*(x582)))+(((IkReal(-1.00000000000000))*(x578)*(x584))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((sj4)*(x584)))+(((IkReal(-1.00000000000000))*(sj1)*(x578)*(x583)))+(((cj4)*(x580)))+(((cj4)*(sj1)*(x582)))+(((IkReal(-1.00000000000000))*(cj1)*(sj4)*(x582)))+(((sj4)*(x579))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(x581)*(x583)))+(((sj4)*(x580)))+(((cj1)*(cj4)*(x582)))+(((IkReal(-1.00000000000000))*(x578)*(x579)))+(((x581)*(x582)))+(((IkReal(-1.00000000000000))*(x578)*(x584)))))), ((gconst8)*(((((sj4)*(x584)))+(((IkReal(-1.00000000000000))*(sj1)*(x578)*(x583)))+(((cj4)*(x580)))+(((cj4)*(sj1)*(x582)))+(((IkReal(-1.00000000000000))*(cj1)*(sj4)*(x582)))+(((sj4)*(x579)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x585=IKsin(j2);
IkReal x586=IKcos(j2);
IkReal x587=((IkReal(0.0950000000000000))*(cj5));
IkReal x588=((sj0)*(sj5));
IkReal x589=((IkReal(1.00000000000000))*(sj4));
IkReal x590=((IkReal(0.350000000000000))*(sj1));
IkReal x591=((cj5)*(r00));
IkReal x592=((IkReal(0.0950000000000000))*(sj5));
IkReal x593=((cj5)*(r20));
IkReal x594=((cj0)*(r01));
IkReal x595=((IkReal(1.00000000000000))*(sj0));
IkReal x596=((cj5)*(r10));
IkReal x597=((IkReal(0.350000000000000))*(cj1));
IkReal x598=((r21)*(sj5));
IkReal x599=((sj1)*(x585));
IkReal x600=((IkReal(1.00000000000000))*(cj0)*(cj4));
IkReal x601=((IkReal(1.00000000000000))*(x586));
IkReal x602=((cj1)*(x585));
IkReal x603=((cj1)*(x601));
evalcond[0]=((((IkReal(-1.00000000000000))*(x586)*(x597)))+(((x585)*(x590)))+(((r21)*(x587)))+(pz)+(((r20)*(x592)))+(((IkReal(-1.00000000000000))*(x597))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x589)*(x593)))+(((IkReal(-1.00000000000000))*(x603)))+(((cj4)*(r22)))+(((sj4)*(x598)))+(x599));
evalcond[2]=((((IkReal(-1.00000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(cj4)*(x598)))+(((IkReal(-1.00000000000000))*(sj1)*(x601)))+(((r22)*(sj4)))+(((cj4)*(x593))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x587)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x592)))+(((x586)*(x590)))+(((IkReal(-1.00000000000000))*(py)*(x595)))+(((IkReal(-0.0950000000000000))*(r10)*(x588)))+(x590)+(((x585)*(x597)))+(((IkReal(-1.00000000000000))*(x587)*(x594))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(x588)*(x589)))+(((IkReal(-1.00000000000000))*(sj5)*(x589)*(x594)))+(((sj0)*(sj4)*(x596)))+(((IkReal(-1.00000000000000))*(cj4)*(r12)*(x595)))+(((IkReal(-1.00000000000000))*(r02)*(x600)))+(((sj1)*(x586)))+(((cj0)*(sj4)*(x591)))+(x602));
evalcond[5]=((((cj4)*(sj5)*(x594)))+(((IkReal(-1.00000000000000))*(x591)*(x600)))+(((IkReal(-1.00000000000000))*(cj4)*(x595)*(x596)))+(((IkReal(-1.00000000000000))*(x603)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x589)))+(((cj4)*(r11)*(x588)))+(x599)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x589))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x604=((IkReal(1.90000000000000))*(sj3));
IkReal x605=((r20)*(sj5));
IkReal x606=((IkReal(7.00000000000000))*(sj3));
IkReal x607=((cj5)*(r21)*(sj1));
IkReal x608=((IkReal(20.0000000000000))*(pz)*(sj3));
IkReal x609=((cj1)*(cj5)*(r21));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(sj1)*(x608)))+(((IkReal(-1.00000000000000))*(x604)*(x607)))+(((cj1)*(sj1)*(x606)))+(((IkReal(7.00000000000000))*(cj1)*(x605)))+(((IkReal(-1.00000000000000))*(sj1)*(x604)*(x605)))+(((IkReal(7.00000000000000))*(x609))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(7.00000000000000))*(sj1)*(x605)))+(((cj1)*(x608)))+(((cj1)*(x604)*(x605)))+(((x604)*(x609)))+(((IkReal(-1.00000000000000))*(x606)*((cj1)*(cj1))))+(((IkReal(7.00000000000000))*(x607))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(sj1)*(x608)))+(((IkReal(-1.00000000000000))*(x604)*(x607)))+(((cj1)*(sj1)*(x606)))+(((IkReal(7.00000000000000))*(cj1)*(x605)))+(((IkReal(-1.00000000000000))*(sj1)*(x604)*(x605)))+(((IkReal(7.00000000000000))*(x609)))))), ((gconst5)*(((((IkReal(7.00000000000000))*(sj1)*(x605)))+(((cj1)*(x608)))+(((cj1)*(x604)*(x605)))+(((x604)*(x609)))+(((IkReal(-1.00000000000000))*(x606)*((cj1)*(cj1))))+(((IkReal(7.00000000000000))*(x607)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x610=IKsin(j2);
IkReal x611=IKcos(j2);
IkReal x612=((IkReal(1.00000000000000))*(cj4));
IkReal x613=((cj0)*(r02));
IkReal x614=((cj3)*(sj1));
IkReal x615=((r10)*(sj0));
IkReal x616=((IkReal(1.00000000000000))*(sj5));
IkReal x617=((IkReal(0.0950000000000000))*(cj5));
IkReal x618=((IkReal(0.0950000000000000))*(sj5));
IkReal x619=((sj0)*(sj4));
IkReal x620=((IkReal(0.350000000000000))*(sj1));
IkReal x621=((cj1)*(sj3));
IkReal x622=((sj1)*(sj3));
IkReal x623=((IkReal(1.00000000000000))*(cj5));
IkReal x624=((cj0)*(r01));
IkReal x625=((cj0)*(r00));
IkReal x626=((r11)*(sj0));
IkReal x627=((r21)*(sj5));
IkReal x628=((cj4)*(sj5));
IkReal x629=((IkReal(1.00000000000000))*(x610));
IkReal x630=((cj1)*(x611));
IkReal x631=((cj1)*(x610));
IkReal x632=((cj5)*(x625));
IkReal x633=((IkReal(1.00000000000000))*(x611));
evalcond[0]=((((r20)*(sj5)))+(((IkReal(-1.00000000000000))*(x622)*(x633)))+(((IkReal(-1.00000000000000))*(x621)*(x629)))+(((cj5)*(r21))));
evalcond[1]=((((x610)*(x620)))+(((IkReal(-0.350000000000000))*(cj1)))+(((IkReal(-0.350000000000000))*(x630)))+(pz)+(((r20)*(x618)))+(((r21)*(x617))));
evalcond[2]=((((sj1)*(x610)))+(((IkReal(-1.00000000000000))*(r20)*(sj4)*(x623)))+(((IkReal(-1.00000000000000))*(x630)))+(((cj4)*(r22)))+(((sj4)*(x627))));
evalcond[3]=((((cj3)*(x631)))+(((x611)*(x614)))+(((cj4)*(cj5)*(r20)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(x612)*(x627))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x616)*(x625)))+(((IkReal(-1.00000000000000))*(x623)*(x626)))+(((IkReal(-1.00000000000000))*(x621)*(x633)))+(((x610)*(x622)))+(((IkReal(-1.00000000000000))*(x615)*(x616)))+(((IkReal(-1.00000000000000))*(x623)*(x624))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((x611)*(x620)))+(((IkReal(-1.00000000000000))*(x618)*(x625)))+(((IkReal(-1.00000000000000))*(x617)*(x624)))+(((IkReal(-1.00000000000000))*(x615)*(x618)))+(((IkReal(-1.00000000000000))*(x617)*(x626)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(x620)+(((IkReal(0.350000000000000))*(x631))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r12)*(sj0)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x613)))+(((IkReal(-1.00000000000000))*(sj4)*(x616)*(x624)))+(((sj4)*(x632)))+(((IkReal(-1.00000000000000))*(r11)*(x616)*(x619)))+(x631)+(((sj1)*(x611)))+(((cj5)*(sj4)*(x615))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj5)*(x612)*(x615)))+(((IkReal(-1.00000000000000))*(x614)*(x629)))+(((x624)*(x628)))+(((IkReal(-1.00000000000000))*(x612)*(x632)))+(((IkReal(-1.00000000000000))*(r12)*(x619)))+(((IkReal(-1.00000000000000))*(sj4)*(x613)))+(((cj3)*(x630)))+(((x626)*(x628))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x634=((cj5)*(r20));
IkReal x635=((r20)*(sj5));
IkReal x636=((r21)*(sj5));
IkReal x637=((cj5)*(r21));
IkReal x638=((cj1)*(sj3)*(sj4));
IkReal x639=((cj4)*(r22)*(sj3));
IkReal x640=((sj1)*(sj3)*(sj4));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(sj1)*(x639)))+(((x634)*(x640)))+(((cj1)*(x635)))+(((IkReal(-1.00000000000000))*(x636)*(x640)))+(((cj1)*(x637))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((sj1)*(x637)))+(((sj1)*(x635)))+(((IkReal(-1.00000000000000))*(x634)*(x638)))+(((x636)*(x638)))+(((cj1)*(x639))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(sj1)*(x639)))+(((x634)*(x640)))+(((cj1)*(x635)))+(((IkReal(-1.00000000000000))*(x636)*(x640)))+(((cj1)*(x637)))))), ((gconst4)*(((((sj1)*(x637)))+(((sj1)*(x635)))+(((IkReal(-1.00000000000000))*(x634)*(x638)))+(((x636)*(x638)))+(((cj1)*(x639)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x641=IKsin(j2);
IkReal x642=IKcos(j2);
IkReal x643=((IkReal(1.00000000000000))*(cj4));
IkReal x644=((cj0)*(r02));
IkReal x645=((cj3)*(sj1));
IkReal x646=((r10)*(sj0));
IkReal x647=((IkReal(1.00000000000000))*(sj5));
IkReal x648=((IkReal(0.0950000000000000))*(cj5));
IkReal x649=((IkReal(0.0950000000000000))*(sj5));
IkReal x650=((sj0)*(sj4));
IkReal x651=((IkReal(0.350000000000000))*(sj1));
IkReal x652=((cj1)*(sj3));
IkReal x653=((sj1)*(sj3));
IkReal x654=((IkReal(1.00000000000000))*(cj5));
IkReal x655=((cj0)*(r01));
IkReal x656=((cj0)*(r00));
IkReal x657=((r11)*(sj0));
IkReal x658=((r21)*(sj5));
IkReal x659=((cj4)*(sj5));
IkReal x660=((IkReal(1.00000000000000))*(x641));
IkReal x661=((cj1)*(x642));
IkReal x662=((cj1)*(x641));
IkReal x663=((cj5)*(x656));
IkReal x664=((IkReal(1.00000000000000))*(x642));
evalcond[0]=((((IkReal(-1.00000000000000))*(x652)*(x660)))+(((IkReal(-1.00000000000000))*(x653)*(x664)))+(((r20)*(sj5)))+(((cj5)*(r21))));
evalcond[1]=((((IkReal(-0.350000000000000))*(cj1)))+(((r20)*(x649)))+(((x641)*(x651)))+(((r21)*(x648)))+(((IkReal(-0.350000000000000))*(x661)))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(x661)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(sj4)*(x654)))+(((sj1)*(x641)))+(((sj4)*(x658))));
evalcond[3]=((((cj4)*(cj5)*(r20)))+(((x642)*(x645)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(x643)*(x658)))+(((cj3)*(x662))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x652)*(x664)))+(((IkReal(-1.00000000000000))*(x646)*(x647)))+(((x641)*(x653)))+(((IkReal(-1.00000000000000))*(x647)*(x656)))+(((IkReal(-1.00000000000000))*(x654)*(x655)))+(((IkReal(-1.00000000000000))*(x654)*(x657))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(x651)+(((IkReal(-1.00000000000000))*(x648)*(x655)))+(((IkReal(-1.00000000000000))*(x649)*(x656)))+(((IkReal(-1.00000000000000))*(x648)*(x657)))+(((x642)*(x651)))+(((IkReal(0.350000000000000))*(x662)))+(((IkReal(-1.00000000000000))*(x646)*(x649)))+(((IkReal(-1.00000000000000))*(py)*(sj0))));
evalcond[6]=((((sj4)*(x663)))+(x662)+(((IkReal(-1.00000000000000))*(r11)*(x647)*(x650)))+(((IkReal(-1.00000000000000))*(sj4)*(x647)*(x655)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(((IkReal(-1.00000000000000))*(r12)*(sj0)*(x643)))+(((cj5)*(sj4)*(x646)))+(((sj1)*(x642))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj5)*(x643)*(x646)))+(((IkReal(-1.00000000000000))*(r12)*(x650)))+(((x657)*(x659)))+(((x655)*(x659)))+(((IkReal(-1.00000000000000))*(x645)*(x660)))+(((cj3)*(x661)))+(((IkReal(-1.00000000000000))*(x643)*(x663)))+(((IkReal(-1.00000000000000))*(sj4)*(x644))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x665=((IkReal(1.90000000000000))*(sj3));
IkReal x666=((r20)*(sj5));
IkReal x667=((IkReal(7.00000000000000))*(sj3));
IkReal x668=((cj5)*(r21)*(sj1));
IkReal x669=((IkReal(20.0000000000000))*(pz)*(sj3));
IkReal x670=((cj1)*(cj5)*(r21));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(sj1)*(x665)*(x666)))+(((IkReal(-1.00000000000000))*(sj1)*(x669)))+(((IkReal(7.00000000000000))*(cj1)*(x666)))+(((cj1)*(sj1)*(x667)))+(((IkReal(7.00000000000000))*(x670)))+(((IkReal(-1.00000000000000))*(x665)*(x668))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x667)*((cj1)*(cj1))))+(((cj1)*(x665)*(x666)))+(((IkReal(7.00000000000000))*(x668)))+(((IkReal(7.00000000000000))*(sj1)*(x666)))+(((cj1)*(x669)))+(((x665)*(x670))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(sj1)*(x665)*(x666)))+(((IkReal(-1.00000000000000))*(sj1)*(x669)))+(((IkReal(7.00000000000000))*(cj1)*(x666)))+(((cj1)*(sj1)*(x667)))+(((IkReal(7.00000000000000))*(x670)))+(((IkReal(-1.00000000000000))*(x665)*(x668)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(x667)*((cj1)*(cj1))))+(((cj1)*(x665)*(x666)))+(((IkReal(7.00000000000000))*(x668)))+(((IkReal(7.00000000000000))*(sj1)*(x666)))+(((cj1)*(x669)))+(((x665)*(x670)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x671=IKsin(j2);
IkReal x672=IKcos(j2);
IkReal x673=((IkReal(0.0950000000000000))*(cj5));
IkReal x674=((r20)*(sj5));
IkReal x675=((IkReal(0.350000000000000))*(sj1));
IkReal x676=((IkReal(1.00000000000000))*(cj1));
IkReal x677=((IkReal(1.00000000000000))*(sj0));
IkReal x678=((cj0)*(r01));
IkReal x679=((IkReal(1.00000000000000))*(cj0));
IkReal x680=((r00)*(sj5));
IkReal x681=((IkReal(0.350000000000000))*(cj1));
IkReal x682=((r10)*(sj0)*(sj5));
IkReal x683=((sj3)*(x671));
IkReal x684=((sj3)*(x672));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj1)*(x684)))+(((IkReal(-1.00000000000000))*(x676)*(x683)))+(x674)+(((cj5)*(r21))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x681)))+(((x671)*(x675)))+(((IkReal(-1.00000000000000))*(x672)*(x681)))+(pz)+(((IkReal(0.0950000000000000))*(x674)))+(((r21)*(x673))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj5)*(x678)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x677)))+(((sj1)*(x683)))+(((IkReal(-1.00000000000000))*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x677)))+(((IkReal(-1.00000000000000))*(x676)*(x684))));
evalcond[3]=((((x672)*(x675)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x673)))+(((IkReal(-1.00000000000000))*(px)*(x679)))+(((IkReal(-0.0950000000000000))*(cj0)*(x680)))+(((IkReal(-1.00000000000000))*(py)*(x677)))+(((IkReal(-1.00000000000000))*(x673)*(x678)))+(x675)+(((x671)*(x681)))+(((IkReal(-0.0950000000000000))*(x682))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))));
dummyeval[0]=(((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x685=((IkReal(1.00000000000000))*(sj0));
IkReal x686=((cj5)*(r22));
IkReal x687=((r21)*(sj5));
IkReal x688=((IkReal(1.00000000000000))*(cj0));
IkReal x689=((r22)*(sj5));
IkReal x690=((cj5)*(r20));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(r11)*(x688)*(x689)))+(((IkReal(-1.00000000000000))*(r12)*(x688)*(x690)))+(((r02)*(sj0)*(x690)))+(((cj0)*(r12)*(x687)))+(((cj0)*(r10)*(x686)))+(((IkReal(-1.00000000000000))*(r02)*(x685)*(x687)))+(((IkReal(-1.00000000000000))*(r00)*(x685)*(x686)))+(((r01)*(sj0)*(x689)))));
IkReal x691=((IkReal(1.00000000000000))*(sj0));
IkReal x692=((cj5)*(r22));
IkReal x693=((r21)*(sj5));
IkReal x694=((IkReal(1.00000000000000))*(cj0));
IkReal x695=((r22)*(sj5));
IkReal x696=((cj5)*(r20));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(x691)*(x692)))+(((r02)*(sj0)*(x696)))+(((cj0)*(r10)*(x692)))+(((IkReal(-1.00000000000000))*(r02)*(x691)*(x693)))+(((IkReal(-1.00000000000000))*(r11)*(x694)*(x695)))+(((IkReal(-1.00000000000000))*(r12)*(x694)*(x696)))+(((cj0)*(r12)*(x693)))+(((r01)*(sj0)*(x695))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x697=((cj1)*(cj2));
IkReal x698=((IkReal(1.00000000000000))*(sj0));
IkReal x699=((sj1)*(sj2));
IkReal x700=((cj5)*(r00));
IkReal x701=((r01)*(sj5));
IkReal x702=((cj0)*(r12));
IkReal x703=((cj0)*(cj5)*(r10));
IkReal x704=((cj0)*(r11)*(sj5));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r02)*(x697)*(x698)))+(((r02)*(sj0)*(x699)))+(((IkReal(-1.00000000000000))*(x699)*(x702)))+(((x697)*(x702))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((sj0)*(x699)*(x700)))+(((x697)*(x703)))+(((IkReal(-1.00000000000000))*(x697)*(x704)))+(((IkReal(-1.00000000000000))*(x698)*(x699)*(x701)))+(((sj0)*(x697)*(x701)))+(((IkReal(-1.00000000000000))*(x697)*(x698)*(x700)))+(((IkReal(-1.00000000000000))*(x699)*(x703)))+(((x699)*(x704))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(r02)*(x697)*(x698)))+(((r02)*(sj0)*(x699)))+(((IkReal(-1.00000000000000))*(x699)*(x702)))+(((x697)*(x702)))))), ((gconst11)*(((((sj0)*(x699)*(x700)))+(((x697)*(x703)))+(((IkReal(-1.00000000000000))*(x697)*(x704)))+(((IkReal(-1.00000000000000))*(x698)*(x699)*(x701)))+(((sj0)*(x697)*(x701)))+(((IkReal(-1.00000000000000))*(x697)*(x698)*(x700)))+(((IkReal(-1.00000000000000))*(x699)*(x703)))+(((x699)*(x704)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x705=IKsin(j4);
IkReal x706=IKcos(j4);
IkReal x707=((r12)*(sj0));
IkReal x708=((r11)*(sj5));
IkReal x709=((cj0)*(r12));
IkReal x710=((sj1)*(sj2));
IkReal x711=((cj5)*(sj0));
IkReal x712=((cj0)*(r02));
IkReal x713=((cj1)*(cj2));
IkReal x714=((cj2)*(sj1));
IkReal x715=((r21)*(sj5));
IkReal x716=((cj0)*(cj5));
IkReal x717=((r01)*(sj5));
IkReal x718=((cj5)*(r20));
IkReal x719=((cj1)*(sj2));
IkReal x720=((IkReal(1.00000000000000))*(x705));
IkReal x721=((IkReal(1.00000000000000))*(x706));
IkReal x722=((sj0)*(x706));
IkReal x723=((r10)*(x705));
IkReal x724=((cj0)*(x706));
IkReal x725=((sj0)*(x705));
evalcond[0]=((((IkReal(-1.00000000000000))*(x718)*(x720)))+(((IkReal(-1.00000000000000))*(x713)))+(((r22)*(x706)))+(((x705)*(x715)))+(x710));
evalcond[1]=((((cj3)*(x719)))+(((r22)*(x705)))+(((IkReal(-1.00000000000000))*(x715)*(x721)))+(((x706)*(x718)))+(((cj3)*(x714))));
evalcond[2]=((((x716)*(x723)))+(((IkReal(-1.00000000000000))*(cj0)*(x708)*(x720)))+(((x717)*(x725)))+(((IkReal(-1.00000000000000))*(x709)*(x721)))+(((r02)*(x722)))+(((IkReal(-1.00000000000000))*(r00)*(x711)*(x720))));
evalcond[3]=((((r02)*(x725)))+(sj3)+(((x708)*(x724)))+(((IkReal(-1.00000000000000))*(sj0)*(x717)*(x721)))+(((IkReal(-1.00000000000000))*(r10)*(x716)*(x721)))+(((r00)*(x706)*(x711)))+(((IkReal(-1.00000000000000))*(x709)*(x720))));
evalcond[4]=((((x711)*(x723)))+(((IkReal(-1.00000000000000))*(x712)*(x721)))+(((IkReal(-1.00000000000000))*(x707)*(x721)))+(((IkReal(-1.00000000000000))*(cj0)*(x717)*(x720)))+(((r00)*(x705)*(x716)))+(((IkReal(-1.00000000000000))*(sj0)*(x708)*(x720)))+(x719)+(x714));
evalcond[5]=((((x708)*(x722)))+(((x717)*(x724)))+(((IkReal(-1.00000000000000))*(cj3)*(x710)))+(((cj3)*(x713)))+(((IkReal(-1.00000000000000))*(x707)*(x720)))+(((IkReal(-1.00000000000000))*(r00)*(x716)*(x721)))+(((IkReal(-1.00000000000000))*(x712)*(x720)))+(((IkReal(-1.00000000000000))*(r10)*(x711)*(x721))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x726=((IkReal(1.00000000000000))*(cj3));
IkReal x727=((r22)*(sj2));
IkReal x728=((r21)*(sj5));
IkReal x729=((IkReal(1.00000000000000))*(sj1));
IkReal x730=((cj1)*(cj2));
IkReal x731=((cj2)*(sj1));
IkReal x732=((cj2)*(cj5)*(r20));
IkReal x733=((cj5)*(r20)*(sj2));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj5)*(r20)*(x730)))+(((IkReal(-1.00000000000000))*(r22)*(x726)*(x731)))+(((IkReal(-1.00000000000000))*(sj2)*(x728)*(x729)))+(((sj1)*(x733)))+(((x728)*(x730)))+(((IkReal(-1.00000000000000))*(cj1)*(x726)*(x727))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x727)*(x729)))+(((IkReal(-1.00000000000000))*(cj1)*(x726)*(x733)))+(((cj3)*(x728)*(x731)))+(((r22)*(x730)))+(((cj1)*(cj3)*(sj2)*(x728)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x726)*(x731))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(cj5)*(r20)*(x730)))+(((IkReal(-1.00000000000000))*(r22)*(x726)*(x731)))+(((IkReal(-1.00000000000000))*(sj2)*(x728)*(x729)))+(((sj1)*(x733)))+(((x728)*(x730)))+(((IkReal(-1.00000000000000))*(cj1)*(x726)*(x727)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(x727)*(x729)))+(((IkReal(-1.00000000000000))*(cj1)*(x726)*(x733)))+(((cj3)*(x728)*(x731)))+(((r22)*(x730)))+(((cj1)*(cj3)*(sj2)*(x728)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x726)*(x731)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x734=IKsin(j4);
IkReal x735=IKcos(j4);
IkReal x736=((r12)*(sj0));
IkReal x737=((r11)*(sj5));
IkReal x738=((cj0)*(r12));
IkReal x739=((sj1)*(sj2));
IkReal x740=((cj5)*(sj0));
IkReal x741=((cj0)*(r02));
IkReal x742=((cj1)*(cj2));
IkReal x743=((cj2)*(sj1));
IkReal x744=((r21)*(sj5));
IkReal x745=((cj0)*(cj5));
IkReal x746=((r01)*(sj5));
IkReal x747=((cj5)*(r20));
IkReal x748=((cj1)*(sj2));
IkReal x749=((IkReal(1.00000000000000))*(x734));
IkReal x750=((IkReal(1.00000000000000))*(x735));
IkReal x751=((sj0)*(x735));
IkReal x752=((r10)*(x734));
IkReal x753=((cj0)*(x735));
IkReal x754=((sj0)*(x734));
evalcond[0]=((((x734)*(x744)))+(((IkReal(-1.00000000000000))*(x747)*(x749)))+(x739)+(((r22)*(x735)))+(((IkReal(-1.00000000000000))*(x742))));
evalcond[1]=((((r22)*(x734)))+(((x735)*(x747)))+(((cj3)*(x748)))+(((cj3)*(x743)))+(((IkReal(-1.00000000000000))*(x744)*(x750))));
evalcond[2]=((((x746)*(x754)))+(((IkReal(-1.00000000000000))*(cj0)*(x737)*(x749)))+(((x745)*(x752)))+(((r02)*(x751)))+(((IkReal(-1.00000000000000))*(r00)*(x740)*(x749)))+(((IkReal(-1.00000000000000))*(x738)*(x750))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r10)*(x745)*(x750)))+(((x737)*(x753)))+(((IkReal(-1.00000000000000))*(x738)*(x749)))+(sj3)+(((r02)*(x754)))+(((IkReal(-1.00000000000000))*(sj0)*(x746)*(x750)))+(((r00)*(x735)*(x740))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(x746)*(x749)))+(((x740)*(x752)))+(x743)+(x748)+(((IkReal(-1.00000000000000))*(x741)*(x750)))+(((IkReal(-1.00000000000000))*(x736)*(x750)))+(((IkReal(-1.00000000000000))*(sj0)*(x737)*(x749)))+(((r00)*(x734)*(x745))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r00)*(x745)*(x750)))+(((x737)*(x751)))+(((IkReal(-1.00000000000000))*(r10)*(x740)*(x750)))+(((IkReal(-1.00000000000000))*(cj3)*(x739)))+(((cj3)*(x742)))+(((IkReal(-1.00000000000000))*(x741)*(x749)))+(((IkReal(-1.00000000000000))*(x736)*(x749)))+(((x746)*(x753))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x755=((IkReal(1.00000000000000))*(cj1));
IkReal x756=((sj0)*(sj1));
IkReal x757=((cj5)*(r11));
IkReal x758=((r10)*(sj5));
IkReal x759=((r20)*(sj5));
IkReal x760=((cj5)*(r21));
IkReal x761=((cj0)*(cj5)*(r01));
IkReal x762=((cj0)*(r00)*(sj5));
if( IKabs(((gconst2)*(((((cj1)*(x759)))+(((x756)*(x758)))+(((sj1)*(x761)))+(((x756)*(x757)))+(((cj1)*(x760)))+(((sj1)*(x762))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x755)*(x761)))+(((sj1)*(x760)))+(((sj1)*(x759)))+(((IkReal(-1.00000000000000))*(x755)*(x762)))+(((IkReal(-1.00000000000000))*(sj0)*(x755)*(x757)))+(((IkReal(-1.00000000000000))*(sj0)*(x755)*(x758))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((cj1)*(x759)))+(((x756)*(x758)))+(((sj1)*(x761)))+(((x756)*(x757)))+(((cj1)*(x760)))+(((sj1)*(x762)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x755)*(x761)))+(((sj1)*(x760)))+(((sj1)*(x759)))+(((IkReal(-1.00000000000000))*(x755)*(x762)))+(((IkReal(-1.00000000000000))*(sj0)*(x755)*(x757)))+(((IkReal(-1.00000000000000))*(sj0)*(x755)*(x758)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x763=IKsin(j2);
IkReal x764=IKcos(j2);
IkReal x765=((IkReal(0.0950000000000000))*(cj5));
IkReal x766=((r20)*(sj5));
IkReal x767=((IkReal(0.350000000000000))*(sj1));
IkReal x768=((IkReal(1.00000000000000))*(cj1));
IkReal x769=((IkReal(1.00000000000000))*(sj0));
IkReal x770=((cj0)*(r01));
IkReal x771=((IkReal(1.00000000000000))*(cj0));
IkReal x772=((r00)*(sj5));
IkReal x773=((IkReal(0.350000000000000))*(cj1));
IkReal x774=((r10)*(sj0)*(sj5));
IkReal x775=((sj3)*(x763));
IkReal x776=((sj3)*(x764));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj1)*(x776)))+(x766)+(((IkReal(-1.00000000000000))*(x768)*(x775)))+(((cj5)*(r21))));
evalcond[1]=((((IkReal(0.0950000000000000))*(x766)))+(((r21)*(x765)))+(pz)+(((x763)*(x767)))+(((IkReal(-1.00000000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x764)*(x773))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj5)*(r11)*(x769)))+(((IkReal(-1.00000000000000))*(x771)*(x772)))+(((IkReal(-1.00000000000000))*(cj5)*(x770)))+(((sj1)*(x775)))+(((IkReal(-1.00000000000000))*(x768)*(x776)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x769))));
evalcond[3]=((((IkReal(-1.00000000000000))*(py)*(x769)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x765)))+(((IkReal(-0.0950000000000000))*(cj0)*(x772)))+(((IkReal(-0.0950000000000000))*(x774)))+(x767)+(((IkReal(-1.00000000000000))*(x765)*(x770)))+(((x763)*(x773)))+(((x764)*(x767)))+(((IkReal(-1.00000000000000))*(px)*(x771))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))));
dummyeval[0]=(((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x777=((IkReal(1.00000000000000))*(sj0));
IkReal x778=((cj5)*(r22));
IkReal x779=((r21)*(sj5));
IkReal x780=((IkReal(1.00000000000000))*(cj0));
IkReal x781=((r22)*(sj5));
IkReal x782=((cj5)*(r20));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(r00)*(x777)*(x778)))+(((r02)*(sj0)*(x782)))+(((IkReal(-1.00000000000000))*(r11)*(x780)*(x781)))+(((IkReal(-1.00000000000000))*(r12)*(x780)*(x782)))+(((r01)*(sj0)*(x781)))+(((cj0)*(r10)*(x778)))+(((cj0)*(r12)*(x779)))+(((IkReal(-1.00000000000000))*(r02)*(x777)*(x779)))));
IkReal x783=((IkReal(1.00000000000000))*(sj0));
IkReal x784=((cj5)*(r22));
IkReal x785=((r21)*(sj5));
IkReal x786=((IkReal(1.00000000000000))*(cj0));
IkReal x787=((r22)*(sj5));
IkReal x788=((cj5)*(r20));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r12)*(x786)*(x788)))+(((cj0)*(r12)*(x785)))+(((IkReal(-1.00000000000000))*(r00)*(x783)*(x784)))+(((IkReal(-1.00000000000000))*(r02)*(x783)*(x785)))+(((cj0)*(r10)*(x784)))+(((r02)*(sj0)*(x788)))+(((IkReal(-1.00000000000000))*(r11)*(x786)*(x787)))+(((r01)*(sj0)*(x787))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x789=((cj1)*(cj2));
IkReal x790=((IkReal(1.00000000000000))*(sj0));
IkReal x791=((sj1)*(sj2));
IkReal x792=((cj5)*(r00));
IkReal x793=((r01)*(sj5));
IkReal x794=((cj0)*(r12));
IkReal x795=((cj0)*(cj5)*(r10));
IkReal x796=((cj0)*(r11)*(sj5));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r02)*(x789)*(x790)))+(((IkReal(-1.00000000000000))*(x791)*(x794)))+(((x789)*(x794)))+(((r02)*(sj0)*(x791))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((x789)*(x795)))+(((x791)*(x796)))+(((IkReal(-1.00000000000000))*(x790)*(x791)*(x793)))+(((sj0)*(x789)*(x793)))+(((IkReal(-1.00000000000000))*(x789)*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(x791)*(x795)))+(((sj0)*(x791)*(x792)))+(((IkReal(-1.00000000000000))*(x789)*(x796))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(r02)*(x789)*(x790)))+(((IkReal(-1.00000000000000))*(x791)*(x794)))+(((x789)*(x794)))+(((r02)*(sj0)*(x791)))))), ((gconst11)*(((((x789)*(x795)))+(((x791)*(x796)))+(((IkReal(-1.00000000000000))*(x790)*(x791)*(x793)))+(((sj0)*(x789)*(x793)))+(((IkReal(-1.00000000000000))*(x789)*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(x791)*(x795)))+(((sj0)*(x791)*(x792)))+(((IkReal(-1.00000000000000))*(x789)*(x796)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x797=IKsin(j4);
IkReal x798=IKcos(j4);
IkReal x799=((r12)*(sj0));
IkReal x800=((r11)*(sj5));
IkReal x801=((cj0)*(r12));
IkReal x802=((sj1)*(sj2));
IkReal x803=((cj5)*(sj0));
IkReal x804=((cj0)*(r02));
IkReal x805=((cj1)*(cj2));
IkReal x806=((cj2)*(sj1));
IkReal x807=((r21)*(sj5));
IkReal x808=((cj0)*(cj5));
IkReal x809=((r01)*(sj5));
IkReal x810=((cj5)*(r20));
IkReal x811=((cj1)*(sj2));
IkReal x812=((IkReal(1.00000000000000))*(x797));
IkReal x813=((IkReal(1.00000000000000))*(x798));
IkReal x814=((sj0)*(x798));
IkReal x815=((r10)*(x797));
IkReal x816=((cj0)*(x798));
IkReal x817=((sj0)*(x797));
evalcond[0]=((x802)+(((r22)*(x798)))+(((IkReal(-1.00000000000000))*(x810)*(x812)))+(((IkReal(-1.00000000000000))*(x805)))+(((x797)*(x807))));
evalcond[1]=((((r22)*(x797)))+(((x798)*(x810)))+(((cj3)*(x806)))+(((IkReal(-1.00000000000000))*(x807)*(x813)))+(((cj3)*(x811))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x803)*(x812)))+(((x809)*(x817)))+(((IkReal(-1.00000000000000))*(cj0)*(x800)*(x812)))+(((r02)*(x814)))+(((IkReal(-1.00000000000000))*(x801)*(x813)))+(((x808)*(x815))));
evalcond[3]=((((r00)*(x798)*(x803)))+(((IkReal(-1.00000000000000))*(r10)*(x808)*(x813)))+(((r02)*(x817)))+(sj3)+(((x800)*(x816)))+(((IkReal(-1.00000000000000))*(x801)*(x812)))+(((IkReal(-1.00000000000000))*(sj0)*(x809)*(x813))));
evalcond[4]=((x806)+(((IkReal(-1.00000000000000))*(cj0)*(x809)*(x812)))+(((x803)*(x815)))+(((IkReal(-1.00000000000000))*(x799)*(x813)))+(((IkReal(-1.00000000000000))*(sj0)*(x800)*(x812)))+(((IkReal(-1.00000000000000))*(x804)*(x813)))+(x811)+(((r00)*(x797)*(x808))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(x802)))+(((IkReal(-1.00000000000000))*(r10)*(x803)*(x813)))+(((IkReal(-1.00000000000000))*(x804)*(x812)))+(((x809)*(x816)))+(((IkReal(-1.00000000000000))*(r00)*(x808)*(x813)))+(((IkReal(-1.00000000000000))*(x799)*(x812)))+(((x800)*(x814)))+(((cj3)*(x805))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x818=((IkReal(1.00000000000000))*(cj3));
IkReal x819=((r22)*(sj2));
IkReal x820=((r21)*(sj5));
IkReal x821=((IkReal(1.00000000000000))*(sj1));
IkReal x822=((cj1)*(cj2));
IkReal x823=((cj2)*(sj1));
IkReal x824=((cj2)*(cj5)*(r20));
IkReal x825=((cj5)*(r20)*(sj2));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(sj2)*(x820)*(x821)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x822)))+(((IkReal(-1.00000000000000))*(r22)*(x818)*(x823)))+(((x820)*(x822)))+(((IkReal(-1.00000000000000))*(cj1)*(x818)*(x819)))+(((sj1)*(x825))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj1)*(x818)*(x825)))+(((r22)*(x822)))+(((cj3)*(x820)*(x823)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x818)*(x823)))+(((IkReal(-1.00000000000000))*(x819)*(x821)))+(((cj1)*(cj3)*(sj2)*(x820))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(sj2)*(x820)*(x821)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x822)))+(((IkReal(-1.00000000000000))*(r22)*(x818)*(x823)))+(((x820)*(x822)))+(((IkReal(-1.00000000000000))*(cj1)*(x818)*(x819)))+(((sj1)*(x825)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(cj1)*(x818)*(x825)))+(((r22)*(x822)))+(((cj3)*(x820)*(x823)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x818)*(x823)))+(((IkReal(-1.00000000000000))*(x819)*(x821)))+(((cj1)*(cj3)*(sj2)*(x820)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x826=IKsin(j4);
IkReal x827=IKcos(j4);
IkReal x828=((r12)*(sj0));
IkReal x829=((r11)*(sj5));
IkReal x830=((cj0)*(r12));
IkReal x831=((sj1)*(sj2));
IkReal x832=((cj5)*(sj0));
IkReal x833=((cj0)*(r02));
IkReal x834=((cj1)*(cj2));
IkReal x835=((cj2)*(sj1));
IkReal x836=((r21)*(sj5));
IkReal x837=((cj0)*(cj5));
IkReal x838=((r01)*(sj5));
IkReal x839=((cj5)*(r20));
IkReal x840=((cj1)*(sj2));
IkReal x841=((IkReal(1.00000000000000))*(x826));
IkReal x842=((IkReal(1.00000000000000))*(x827));
IkReal x843=((sj0)*(x827));
IkReal x844=((r10)*(x826));
IkReal x845=((cj0)*(x827));
IkReal x846=((sj0)*(x826));
evalcond[0]=((((x826)*(x836)))+(((r22)*(x827)))+(x831)+(((IkReal(-1.00000000000000))*(x839)*(x841)))+(((IkReal(-1.00000000000000))*(x834))));
evalcond[1]=((((cj3)*(x835)))+(((x827)*(x839)))+(((cj3)*(x840)))+(((IkReal(-1.00000000000000))*(x836)*(x842)))+(((r22)*(x826))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x830)*(x842)))+(((IkReal(-1.00000000000000))*(cj0)*(x829)*(x841)))+(((x837)*(x844)))+(((IkReal(-1.00000000000000))*(r00)*(x832)*(x841)))+(((x838)*(x846)))+(((r02)*(x843))));
evalcond[3]=((((x829)*(x845)))+(((IkReal(-1.00000000000000))*(x830)*(x841)))+(((IkReal(-1.00000000000000))*(r10)*(x837)*(x842)))+(sj3)+(((r00)*(x827)*(x832)))+(((IkReal(-1.00000000000000))*(sj0)*(x838)*(x842)))+(((r02)*(x846))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj0)*(x829)*(x841)))+(((r00)*(x826)*(x837)))+(x840)+(((IkReal(-1.00000000000000))*(x833)*(x842)))+(((IkReal(-1.00000000000000))*(x828)*(x842)))+(x835)+(((x832)*(x844)))+(((IkReal(-1.00000000000000))*(cj0)*(x838)*(x841))));
evalcond[5]=((((cj3)*(x834)))+(((IkReal(-1.00000000000000))*(cj3)*(x831)))+(((x829)*(x843)))+(((IkReal(-1.00000000000000))*(r00)*(x837)*(x842)))+(((IkReal(-1.00000000000000))*(r10)*(x832)*(x842)))+(((IkReal(-1.00000000000000))*(x828)*(x841)))+(((x838)*(x845)))+(((IkReal(-1.00000000000000))*(x833)*(x841))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x847=((IkReal(20.0000000000000))*(cj1));
IkReal x848=((cj0)*(px));
IkReal x849=((py)*(sj0));
IkReal x850=((IkReal(20.0000000000000))*(sj1));
IkReal x851=((IkReal(1.90000000000000))*(sj1));
IkReal x852=((cj0)*(r00));
IkReal x853=((IkReal(1.90000000000000))*(cj1));
IkReal x854=((r10)*(sj0));
IkReal x855=((IkReal(1.90000000000000))*(cj5)*(r21));
IkReal x856=((sj5)*(x853));
IkReal x857=((cj0)*(cj5)*(r01));
IkReal x858=((cj5)*(r11)*(sj0));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(x847)*(x849)))+(((IkReal(-1.00000000000000))*(x853)*(x857)))+(((cj5)*(r21)*(x851)))+(((pz)*(x850)))+(((IkReal(-1.00000000000000))*(x852)*(x856)))+(((IkReal(-1.00000000000000))*(x853)*(x858)))+(((r20)*(sj5)*(x851)))+(((IkReal(-1.00000000000000))*(x854)*(x856)))+(((IkReal(-1.00000000000000))*(x847)*(x848))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(x851)*(x857)))+(((IkReal(-1.00000000000000))*(r20)*(x856)))+(((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*(sj5)*(x851)*(x854)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)*(x853)))+(((IkReal(-1.00000000000000))*(sj5)*(x851)*(x852)))+(((IkReal(-1.00000000000000))*(x851)*(x858)))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((IkReal(-1.00000000000000))*(x848)*(x850)))+(((IkReal(-1.00000000000000))*(pz)*(x847))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(x847)*(x849)))+(((IkReal(-1.00000000000000))*(x853)*(x857)))+(((cj5)*(r21)*(x851)))+(((pz)*(x850)))+(((IkReal(-1.00000000000000))*(x852)*(x856)))+(((IkReal(-1.00000000000000))*(x853)*(x858)))+(((r20)*(sj5)*(x851)))+(((IkReal(-1.00000000000000))*(x854)*(x856)))+(((IkReal(-1.00000000000000))*(x847)*(x848)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(x851)*(x857)))+(((IkReal(-1.00000000000000))*(r20)*(x856)))+(((IkReal(7.00000000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*(sj5)*(x851)*(x854)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)*(x853)))+(((IkReal(-1.00000000000000))*(sj5)*(x851)*(x852)))+(((IkReal(-1.00000000000000))*(x851)*(x858)))+(((IkReal(7.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((IkReal(-1.00000000000000))*(x848)*(x850)))+(((IkReal(-1.00000000000000))*(pz)*(x847)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x859=IKsin(j2);
IkReal x860=IKcos(j2);
IkReal x861=((IkReal(0.350000000000000))*(cj1));
IkReal x862=((IkReal(0.0950000000000000))*(cj5));
IkReal x863=((IkReal(0.0950000000000000))*(sj5));
IkReal x864=((IkReal(0.350000000000000))*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(x861)))+(((x859)*(x864)))+(pz)+(((r21)*(x862)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((r20)*(x863))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(px)))+(((x859)*(x861)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x863)))+(x864)+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x862)))+(((x860)*(x864)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x863)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x862))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x865=((IkReal(1.00000000000000))*(sj0));
IkReal x866=((cj5)*(r22));
IkReal x867=((r21)*(sj5));
IkReal x868=((IkReal(1.00000000000000))*(cj0));
IkReal x869=((r22)*(sj5));
IkReal x870=((cj5)*(r20));
gconst22=IKsign(((((IkReal(-1.00000000000000))*(r00)*(x865)*(x866)))+(((IkReal(-1.00000000000000))*(r12)*(x868)*(x870)))+(((IkReal(-1.00000000000000))*(r02)*(x865)*(x867)))+(((cj0)*(r12)*(x867)))+(((IkReal(-1.00000000000000))*(r11)*(x868)*(x869)))+(((r01)*(sj0)*(x869)))+(((cj0)*(r10)*(x866)))+(((r02)*(sj0)*(x870)))));
IkReal x871=((IkReal(1.00000000000000))*(sj0));
IkReal x872=((cj5)*(r22));
IkReal x873=((r21)*(sj5));
IkReal x874=((IkReal(1.00000000000000))*(cj0));
IkReal x875=((r22)*(sj5));
IkReal x876=((cj5)*(r20));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(x871)*(x872)))+(((IkReal(-1.00000000000000))*(r12)*(x874)*(x876)))+(((cj0)*(r10)*(x872)))+(((cj0)*(r12)*(x873)))+(((IkReal(-1.00000000000000))*(r11)*(x874)*(x875)))+(((r01)*(sj0)*(x875)))+(((r02)*(sj0)*(x876)))+(((IkReal(-1.00000000000000))*(r02)*(x871)*(x873))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
IkReal x877=((IkReal(1.00000000000000))*(sj0));
IkReal x878=((cj5)*(r20));
IkReal x879=((r22)*(sj5));
IkReal x880=((cj5)*(r22));
IkReal x881=((r21)*(sj5));
IkReal x882=((cj0)*(r02));
gconst23=IKsign(((((IkReal(-1.00000000000000))*(r12)*(x877)*(x878)))+(((IkReal(-1.00000000000000))*(r11)*(x877)*(x879)))+(((IkReal(-1.00000000000000))*(x878)*(x882)))+(((r12)*(sj0)*(x881)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x879)))+(((cj0)*(r00)*(x880)))+(((r10)*(sj0)*(x880)))+(((x881)*(x882)))));
IkReal x883=((IkReal(1.00000000000000))*(sj0));
IkReal x884=((cj5)*(r20));
IkReal x885=((r22)*(sj5));
IkReal x886=((cj5)*(r22));
IkReal x887=((r21)*(sj5));
IkReal x888=((cj0)*(r02));
dummyeval[0]=((((x887)*(x888)))+(((IkReal(-1.00000000000000))*(x884)*(x888)))+(((cj0)*(r00)*(x886)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x885)))+(((IkReal(-1.00000000000000))*(r11)*(x883)*(x885)))+(((IkReal(-1.00000000000000))*(r12)*(x883)*(x884)))+(((r12)*(sj0)*(x887)))+(((r10)*(sj0)*(x886))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x889=((IkReal(1.00000000000000))*(sj0));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj5)*(r01)*(x889)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x889)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))))+IKsqr(((((IkReal(-1.00000000000000))*(cj5)*(r01)*(x889)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x889)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))), ((((IkReal(-1.00000000000000))*(cj5)*(r01)*(x889)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x889)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x890=IKsin(j3);
IkReal x891=((IkReal(1.00000000000000))*(cj5));
IkReal x892=((sj0)*(sj5));
IkReal x893=((IkReal(1.00000000000000))*(r10));
IkReal x894=((cj0)*(sj5));
IkReal x895=((sj2)*(x890));
IkReal x896=((IkReal(1.00000000000000))*(cj2)*(x890));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj1)*(x896)))+(((r20)*(sj5)))+(((IkReal(-1.00000000000000))*(cj1)*(x895)))+(((cj5)*(r21))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x893)*(x894)))+(((cj5)*(r01)*(sj0)))+(IKcos(j3))+(((r00)*(x892)))+(((IkReal(-1.00000000000000))*(cj0)*(r11)*(x891))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x896)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x891)))+(((IkReal(-1.00000000000000))*(x892)*(x893)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x891)))+(((IkReal(-1.00000000000000))*(r00)*(x894)))+(((sj1)*(x895))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))));
dummyeval[0]=(((((r21)*(r21))*((sj5)*(sj5))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
IkReal x897=((IkReal(1.00000000000000))*(sj0));
IkReal x898=((cj5)*(r22));
IkReal x899=((r21)*(sj5));
IkReal x900=((IkReal(1.00000000000000))*(cj0));
IkReal x901=((r22)*(sj5));
IkReal x902=((cj5)*(r20));
gconst25=IKsign(((((cj0)*(r12)*(x899)))+(((IkReal(-1.00000000000000))*(r00)*(x897)*(x898)))+(((r02)*(sj0)*(x902)))+(((IkReal(-1.00000000000000))*(r02)*(x897)*(x899)))+(((IkReal(-1.00000000000000))*(r11)*(x900)*(x901)))+(((IkReal(-1.00000000000000))*(r12)*(x900)*(x902)))+(((cj0)*(r10)*(x898)))+(((r01)*(sj0)*(x901)))));
IkReal x903=((IkReal(1.00000000000000))*(sj0));
IkReal x904=((cj5)*(r22));
IkReal x905=((r21)*(sj5));
IkReal x906=((IkReal(1.00000000000000))*(cj0));
IkReal x907=((r22)*(sj5));
IkReal x908=((cj5)*(r20));
dummyeval[0]=((((cj0)*(r12)*(x905)))+(((r02)*(sj0)*(x908)))+(((IkReal(-1.00000000000000))*(r00)*(x903)*(x904)))+(((IkReal(-1.00000000000000))*(r11)*(x906)*(x907)))+(((IkReal(-1.00000000000000))*(r12)*(x906)*(x908)))+(((IkReal(-1.00000000000000))*(r02)*(x903)*(x905)))+(((cj0)*(r10)*(x904)))+(((r01)*(sj0)*(x907))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x909=((cj0)*(r10));
IkReal x910=((r02)*(sj0));
IkReal x911=((sj1)*(sj2));
IkReal x912=((IkReal(1.00000000000000))*(sj0));
IkReal x913=((r01)*(sj5));
IkReal x914=((cj0)*(r12));
IkReal x915=((cj1)*(cj2));
IkReal x916=((cj5)*(x915));
IkReal x917=((IkReal(1.00000000000000))*(x915));
IkReal x918=((cj0)*(r11)*(sj5));
if( IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(x910)*(x917)))+(((x910)*(x911)))+(((x914)*(x915)))+(((IkReal(-1.00000000000000))*(x911)*(x914))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((sj0)*(x913)*(x915)))+(((cj5)*(r00)*(sj0)*(x911)))+(((IkReal(-1.00000000000000))*(cj5)*(x909)*(x911)))+(((IkReal(-1.00000000000000))*(r00)*(x912)*(x916)))+(((IkReal(-1.00000000000000))*(x917)*(x918)))+(((IkReal(-1.00000000000000))*(x911)*(x912)*(x913)))+(((x909)*(x916)))+(((x911)*(x918))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst25)*(((((IkReal(-1.00000000000000))*(x910)*(x917)))+(((x910)*(x911)))+(((x914)*(x915)))+(((IkReal(-1.00000000000000))*(x911)*(x914)))))), ((gconst25)*(((((sj0)*(x913)*(x915)))+(((cj5)*(r00)*(sj0)*(x911)))+(((IkReal(-1.00000000000000))*(cj5)*(x909)*(x911)))+(((IkReal(-1.00000000000000))*(r00)*(x912)*(x916)))+(((IkReal(-1.00000000000000))*(x917)*(x918)))+(((IkReal(-1.00000000000000))*(x911)*(x912)*(x913)))+(((x909)*(x916)))+(((x911)*(x918)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x919=IKsin(j4);
IkReal x920=IKcos(j4);
IkReal x921=((r12)*(sj0));
IkReal x922=((r11)*(sj5));
IkReal x923=((cj0)*(r12));
IkReal x924=((sj1)*(sj2));
IkReal x925=((cj5)*(sj0));
IkReal x926=((cj0)*(r02));
IkReal x927=((cj1)*(cj2));
IkReal x928=((cj2)*(sj1));
IkReal x929=((r21)*(sj5));
IkReal x930=((cj0)*(cj5));
IkReal x931=((r01)*(sj5));
IkReal x932=((cj5)*(r20));
IkReal x933=((cj1)*(sj2));
IkReal x934=((IkReal(1.00000000000000))*(x919));
IkReal x935=((IkReal(1.00000000000000))*(x920));
IkReal x936=((sj0)*(x920));
IkReal x937=((r10)*(x919));
IkReal x938=((cj0)*(x920));
IkReal x939=((sj0)*(x919));
evalcond[0]=((x924)+(((x919)*(x929)))+(((IkReal(-1.00000000000000))*(x932)*(x934)))+(((r22)*(x920)))+(((IkReal(-1.00000000000000))*(x927))));
evalcond[1]=((((x920)*(x932)))+(((cj3)*(x933)))+(((IkReal(-1.00000000000000))*(x929)*(x935)))+(((r22)*(x919)))+(((cj3)*(x928))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x923)*(x935)))+(((x931)*(x939)))+(((IkReal(-1.00000000000000))*(r00)*(x925)*(x934)))+(((IkReal(-1.00000000000000))*(cj0)*(x922)*(x934)))+(((x930)*(x937)))+(((r02)*(x936))));
evalcond[3]=((((x922)*(x938)))+(sj3)+(((IkReal(-1.00000000000000))*(sj0)*(x931)*(x935)))+(((r02)*(x939)))+(((r00)*(x920)*(x925)))+(((IkReal(-1.00000000000000))*(x923)*(x934)))+(((IkReal(-1.00000000000000))*(r10)*(x930)*(x935))));
evalcond[4]=((x928)+(((IkReal(-1.00000000000000))*(x926)*(x935)))+(((IkReal(-1.00000000000000))*(cj0)*(x931)*(x934)))+(((r00)*(x919)*(x930)))+(((IkReal(-1.00000000000000))*(sj0)*(x922)*(x934)))+(x933)+(((x925)*(x937)))+(((IkReal(-1.00000000000000))*(x921)*(x935))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(x924)))+(((IkReal(-1.00000000000000))*(x926)*(x934)))+(((cj3)*(x927)))+(((IkReal(-1.00000000000000))*(r00)*(x930)*(x935)))+(((IkReal(-1.00000000000000))*(r10)*(x925)*(x935)))+(((x931)*(x938)))+(((IkReal(-1.00000000000000))*(x921)*(x934)))+(((x922)*(x936))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x940=((IkReal(1.00000000000000))*(cj3));
IkReal x941=((cj1)*(sj2));
IkReal x942=((r21)*(sj5));
IkReal x943=((cj1)*(cj2));
IkReal x944=((cj2)*(sj1));
IkReal x945=((cj5)*(r20));
IkReal x946=((cj2)*(x945));
IkReal x947=((IkReal(1.00000000000000))*(sj1)*(sj2));
if( IKabs(((gconst24)*(((((x942)*(x943)))+(((sj1)*(sj2)*(x945)))+(((IkReal(-1.00000000000000))*(x942)*(x947)))+(((IkReal(-1.00000000000000))*(x943)*(x945)))+(((IkReal(-1.00000000000000))*(r22)*(x940)*(x944)))+(((IkReal(-1.00000000000000))*(r22)*(x940)*(x941))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((cj3)*(x941)*(x942)))+(((r22)*(x943)))+(((IkReal(-1.00000000000000))*(x940)*(x941)*(x945)))+(((cj3)*(x942)*(x944)))+(((IkReal(-1.00000000000000))*(r22)*(x947)))+(((IkReal(-1.00000000000000))*(x940)*(x944)*(x945))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((x942)*(x943)))+(((sj1)*(sj2)*(x945)))+(((IkReal(-1.00000000000000))*(x942)*(x947)))+(((IkReal(-1.00000000000000))*(x943)*(x945)))+(((IkReal(-1.00000000000000))*(r22)*(x940)*(x944)))+(((IkReal(-1.00000000000000))*(r22)*(x940)*(x941)))))), ((gconst24)*(((((cj3)*(x941)*(x942)))+(((r22)*(x943)))+(((IkReal(-1.00000000000000))*(x940)*(x941)*(x945)))+(((cj3)*(x942)*(x944)))+(((IkReal(-1.00000000000000))*(r22)*(x947)))+(((IkReal(-1.00000000000000))*(x940)*(x944)*(x945)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x948=IKsin(j4);
IkReal x949=IKcos(j4);
IkReal x950=((r12)*(sj0));
IkReal x951=((r11)*(sj5));
IkReal x952=((cj0)*(r12));
IkReal x953=((sj1)*(sj2));
IkReal x954=((cj5)*(sj0));
IkReal x955=((cj0)*(r02));
IkReal x956=((cj1)*(cj2));
IkReal x957=((cj2)*(sj1));
IkReal x958=((r21)*(sj5));
IkReal x959=((cj0)*(cj5));
IkReal x960=((r01)*(sj5));
IkReal x961=((cj5)*(r20));
IkReal x962=((cj1)*(sj2));
IkReal x963=((IkReal(1.00000000000000))*(x948));
IkReal x964=((IkReal(1.00000000000000))*(x949));
IkReal x965=((sj0)*(x949));
IkReal x966=((r10)*(x948));
IkReal x967=((cj0)*(x949));
IkReal x968=((sj0)*(x948));
evalcond[0]=((((r22)*(x949)))+(((IkReal(-1.00000000000000))*(x956)))+(x953)+(((IkReal(-1.00000000000000))*(x961)*(x963)))+(((x948)*(x958))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x958)*(x964)))+(((r22)*(x948)))+(((cj3)*(x962)))+(((cj3)*(x957)))+(((x949)*(x961))));
evalcond[2]=((((x959)*(x966)))+(((IkReal(-1.00000000000000))*(x952)*(x964)))+(((IkReal(-1.00000000000000))*(cj0)*(x951)*(x963)))+(((x960)*(x968)))+(((r02)*(x965)))+(((IkReal(-1.00000000000000))*(r00)*(x954)*(x963))));
evalcond[3]=((((r00)*(x949)*(x954)))+(sj3)+(((IkReal(-1.00000000000000))*(r10)*(x959)*(x964)))+(((IkReal(-1.00000000000000))*(x952)*(x963)))+(((IkReal(-1.00000000000000))*(sj0)*(x960)*(x964)))+(((r02)*(x968)))+(((x951)*(x967))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj0)*(x951)*(x963)))+(((IkReal(-1.00000000000000))*(cj0)*(x960)*(x963)))+(((IkReal(-1.00000000000000))*(x955)*(x964)))+(x957)+(((r00)*(x948)*(x959)))+(((IkReal(-1.00000000000000))*(x950)*(x964)))+(((x954)*(x966)))+(x962));
evalcond[5]=((((IkReal(-1.00000000000000))*(r00)*(x959)*(x964)))+(((IkReal(-1.00000000000000))*(x955)*(x963)))+(((cj3)*(x956)))+(((IkReal(-1.00000000000000))*(x950)*(x963)))+(((IkReal(-1.00000000000000))*(cj3)*(x953)))+(((x960)*(x967)))+(((IkReal(-1.00000000000000))*(r10)*(x954)*(x964)))+(((x951)*(x965))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x969=((IkReal(1.00000000000000))*(cj2));
IkReal x970=((cj5)*(r20));
IkReal x971=((IkReal(1.00000000000000))*(sj2));
IkReal x972=((cj0)*(r02));
IkReal x973=((cj1)*(cj2));
IkReal x974=((sj1)*(sj2));
IkReal x975=((r12)*(sj0));
IkReal x976=((r21)*(sj5));
IkReal x977=((r11)*(sj0)*(sj5));
IkReal x978=((cj5)*(r10)*(sj0));
IkReal x979=((cj0)*(r01)*(sj5));
IkReal x980=((cj0)*(cj5)*(r00));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(cj1)*(r22)*(x971)))+(((x973)*(x975)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x975)))+(((x972)*(x973)))+(((IkReal(-1.00000000000000))*(r22)*(sj1)*(x969)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x972))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(cj1)*(x969)*(x977)))+(((cj1)*(sj2)*(x976)))+(((x973)*(x980)))+(((x974)*(x977)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x978)))+(((x973)*(x978)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x980)))+(((IkReal(-1.00000000000000))*(cj1)*(x969)*(x979)))+(((cj2)*(sj1)*(x976)))+(((x974)*(x979)))+(((IkReal(-1.00000000000000))*(cj1)*(x970)*(x971)))+(((IkReal(-1.00000000000000))*(sj1)*(x969)*(x970))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(cj1)*(r22)*(x971)))+(((x973)*(x975)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x975)))+(((x972)*(x973)))+(((IkReal(-1.00000000000000))*(r22)*(sj1)*(x969)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x972)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(cj1)*(x969)*(x977)))+(((cj1)*(sj2)*(x976)))+(((x973)*(x980)))+(((x974)*(x977)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x978)))+(((x973)*(x978)))+(((IkReal(-1.00000000000000))*(sj1)*(x971)*(x980)))+(((IkReal(-1.00000000000000))*(cj1)*(x969)*(x979)))+(((cj2)*(sj1)*(x976)))+(((x974)*(x979)))+(((IkReal(-1.00000000000000))*(cj1)*(x970)*(x971)))+(((IkReal(-1.00000000000000))*(sj1)*(x969)*(x970)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x981=IKsin(j4);
IkReal x982=IKcos(j4);
IkReal x983=((cj5)*(r00));
IkReal x984=((cj5)*(r10));
IkReal x985=((r01)*(sj5));
IkReal x986=((cj0)*(x981));
IkReal x987=((IkReal(1.00000000000000))*(r11)*(sj5));
IkReal x988=((sj0)*(x981));
IkReal x989=((r02)*(x982));
IkReal x990=((IkReal(1.00000000000000))*(r12)*(x982));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((r21)*(sj5)*(x981)))+(((sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x981)))+(((r22)*(x982))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(x990)))+(((x985)*(x988)))+(((sj0)*(x989)))+(((IkReal(-1.00000000000000))*(x986)*(x987)))+(((IkReal(-1.00000000000000))*(x983)*(x988)))+(((x984)*(x986))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x987)*(x988)))+(((cj1)*(sj2)))+(((x983)*(x986)))+(((IkReal(-1.00000000000000))*(x985)*(x986)))+(((IkReal(-1.00000000000000))*(cj0)*(x989)))+(((x984)*(x988)))+(((cj2)*(sj1)))+(((IkReal(-1.00000000000000))*(sj0)*(x990))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x991=((IkReal(1.00000000000000))*(sj0));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj5)*(r01)*(x991)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x991))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))))+IKsqr(((((IkReal(-1.00000000000000))*(cj5)*(r01)*(x991)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x991)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))), ((((IkReal(-1.00000000000000))*(cj5)*(r01)*(x991)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x991)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x992=IKsin(j3);
IkReal x993=IKcos(j3);
IkReal x994=((IkReal(1.00000000000000))*(sj0));
IkReal x995=((r12)*(sj4));
IkReal x996=((r10)*(sj5));
IkReal x997=((r02)*(sj4));
IkReal x998=((IkReal(1.00000000000000))*(cj0));
IkReal x999=((cj4)*(cj5));
IkReal x1000=((IkReal(1.00000000000000))*(cj1));
IkReal x1001=((cj4)*(sj5));
IkReal x1002=((cj5)*(r11));
IkReal x1003=((IkReal(1.00000000000000))*(sj1));
IkReal x1004=((cj5)*(r01));
IkReal x1005=((r00)*(sj5));
IkReal x1006=((sj2)*(x992));
IkReal x1007=((cj2)*(x992));
IkReal x1008=((cj2)*(x993));
IkReal x1009=((sj2)*(x993));
evalcond[0]=((((r20)*(sj5)))+(((IkReal(-1.00000000000000))*(x1003)*(x1007)))+(((IkReal(-1.00000000000000))*(x1000)*(x1006)))+(((cj5)*(r21))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x996)*(x998)))+(((sj0)*(x1004)))+(((sj0)*(x1005)))+(x993)+(((IkReal(-1.00000000000000))*(x1002)*(x998))));
evalcond[2]=((((sj1)*(x1008)))+(((IkReal(-1.00000000000000))*(r21)*(x1001)))+(((r22)*(sj4)))+(((cj1)*(x1009)))+(((r20)*(x999))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x994)*(x996)))+(((sj1)*(x1006)))+(((IkReal(-1.00000000000000))*(x1005)*(x998)))+(((IkReal(-1.00000000000000))*(x1004)*(x998)))+(((IkReal(-1.00000000000000))*(x1000)*(x1007)))+(((IkReal(-1.00000000000000))*(x1002)*(x994))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x1001)*(x994)))+(((IkReal(-1.00000000000000))*(r10)*(x998)*(x999)))+(((cj0)*(r11)*(x1001)))+(((r00)*(sj0)*(x999)))+(((sj0)*(x997)))+(((IkReal(-1.00000000000000))*(x995)*(x998)))+(x992));
evalcond[5]=((((IkReal(-1.00000000000000))*(x994)*(x995)))+(((r11)*(sj0)*(x1001)))+(((IkReal(-1.00000000000000))*(x997)*(x998)))+(((IkReal(-1.00000000000000))*(x1003)*(x1009)))+(((cj0)*(r01)*(x1001)))+(((cj1)*(x1008)))+(((IkReal(-1.00000000000000))*(r00)*(x998)*(x999)))+(((IkReal(-1.00000000000000))*(r10)*(x994)*(x999))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1010=((IkReal(1.00000000000000))*(r21));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(r20)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x1010))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x1010)))+(((cj4)*(cj5)*(r20)))+(((r22)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(r20)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x1010)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x1010)))+(((cj4)*(cj5)*(r20)))+(((r22)*(sj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1011=IKsin(j3);
IkReal x1012=IKcos(j3);
IkReal x1013=((IkReal(1.00000000000000))*(sj0));
IkReal x1014=((r12)*(sj4));
IkReal x1015=((r10)*(sj5));
IkReal x1016=((r02)*(sj4));
IkReal x1017=((IkReal(1.00000000000000))*(cj0));
IkReal x1018=((cj4)*(cj5));
IkReal x1019=((IkReal(1.00000000000000))*(cj1));
IkReal x1020=((cj4)*(sj5));
IkReal x1021=((cj5)*(r11));
IkReal x1022=((IkReal(1.00000000000000))*(sj1));
IkReal x1023=((cj5)*(r01));
IkReal x1024=((r00)*(sj5));
IkReal x1025=((sj2)*(x1011));
IkReal x1026=((cj2)*(x1011));
IkReal x1027=((cj2)*(x1012));
IkReal x1028=((sj2)*(x1012));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1019)*(x1025)))+(((IkReal(-1.00000000000000))*(x1022)*(x1026)))+(((r20)*(sj5)))+(((cj5)*(r21))));
evalcond[1]=((((sj0)*(x1024)))+(((IkReal(-1.00000000000000))*(x1017)*(x1021)))+(((sj0)*(x1023)))+(((IkReal(-1.00000000000000))*(x1015)*(x1017)))+(x1012));
evalcond[2]=((((cj1)*(x1028)))+(((r22)*(sj4)))+(((sj1)*(x1027)))+(((IkReal(-1.00000000000000))*(r21)*(x1020)))+(((r20)*(x1018))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1017)*(x1024)))+(((IkReal(-1.00000000000000))*(x1013)*(x1015)))+(((IkReal(-1.00000000000000))*(x1013)*(x1021)))+(((sj1)*(x1025)))+(((IkReal(-1.00000000000000))*(x1019)*(x1026)))+(((IkReal(-1.00000000000000))*(x1017)*(x1023))));
evalcond[4]=((((cj0)*(r11)*(x1020)))+(((r00)*(sj0)*(x1018)))+(((sj0)*(x1016)))+(((IkReal(-1.00000000000000))*(r10)*(x1017)*(x1018)))+(((IkReal(-1.00000000000000))*(r01)*(x1013)*(x1020)))+(x1011)+(((IkReal(-1.00000000000000))*(x1014)*(x1017))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1022)*(x1028)))+(((r11)*(sj0)*(x1020)))+(((cj1)*(x1027)))+(((IkReal(-1.00000000000000))*(r00)*(x1017)*(x1018)))+(((IkReal(-1.00000000000000))*(r10)*(x1013)*(x1018)))+(((cj0)*(r01)*(x1020)))+(((IkReal(-1.00000000000000))*(x1016)*(x1017)))+(((IkReal(-1.00000000000000))*(x1013)*(x1014))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1029=((cj1)*(cj2));
IkReal x1030=((r02)*(sj0));
IkReal x1031=((sj1)*(sj2));
IkReal x1032=((IkReal(1.00000000000000))*(sj0));
IkReal x1033=((r01)*(sj5));
IkReal x1034=((cj5)*(r00));
IkReal x1035=((cj0)*(r12));
IkReal x1036=((cj0)*(cj5)*(r10));
IkReal x1037=((cj0)*(r11)*(sj5));
if( IKabs(((gconst22)*(((((x1030)*(x1031)))+(((x1029)*(x1035)))+(((IkReal(-1.00000000000000))*(x1031)*(x1035)))+(((IkReal(-1.00000000000000))*(x1029)*(x1030))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x1029)*(x1032)*(x1034)))+(((x1029)*(x1036)))+(((IkReal(-1.00000000000000))*(x1031)*(x1032)*(x1033)))+(((sj0)*(x1031)*(x1034)))+(((x1031)*(x1037)))+(((IkReal(-1.00000000000000))*(x1031)*(x1036)))+(((IkReal(-1.00000000000000))*(x1029)*(x1037)))+(((sj0)*(x1029)*(x1033))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst22)*(((((x1030)*(x1031)))+(((x1029)*(x1035)))+(((IkReal(-1.00000000000000))*(x1031)*(x1035)))+(((IkReal(-1.00000000000000))*(x1029)*(x1030)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x1029)*(x1032)*(x1034)))+(((x1029)*(x1036)))+(((IkReal(-1.00000000000000))*(x1031)*(x1032)*(x1033)))+(((sj0)*(x1031)*(x1034)))+(((x1031)*(x1037)))+(((IkReal(-1.00000000000000))*(x1031)*(x1036)))+(((IkReal(-1.00000000000000))*(x1029)*(x1037)))+(((sj0)*(x1029)*(x1033)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1038=IKsin(j4);
IkReal x1039=IKcos(j4);
IkReal x1040=((cj5)*(r00));
IkReal x1041=((cj5)*(r10));
IkReal x1042=((r01)*(sj5));
IkReal x1043=((cj0)*(x1038));
IkReal x1044=((IkReal(1.00000000000000))*(r11)*(sj5));
IkReal x1045=((sj0)*(x1038));
IkReal x1046=((r02)*(x1039));
IkReal x1047=((IkReal(1.00000000000000))*(r12)*(x1039));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x1038)))+(((sj1)*(sj2)))+(((r22)*(x1039)))+(((r21)*(sj5)*(x1038))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1043)*(x1044)))+(((x1042)*(x1045)))+(((IkReal(-1.00000000000000))*(x1040)*(x1045)))+(((sj0)*(x1046)))+(((x1041)*(x1043)))+(((IkReal(-1.00000000000000))*(cj0)*(x1047))));
evalcond[2]=((((x1040)*(x1043)))+(((IkReal(-1.00000000000000))*(sj0)*(x1047)))+(((cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(x1044)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043)))+(((x1041)*(x1045)))+(((cj2)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(x1046))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1048=((IkReal(1.00000000000000))*(sj0));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj5)*(x1048)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x1048))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj5)*(x1048)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x1048)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))), ((((IkReal(-1.00000000000000))*(r00)*(sj5)*(x1048)))+(((cj0)*(cj5)*(r11)))+(((cj0)*(r10)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x1048)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1049=IKsin(j3);
IkReal x1050=IKcos(j3);
IkReal x1051=((IkReal(1.00000000000000))*(sj0));
IkReal x1052=((r12)*(sj4));
IkReal x1053=((r10)*(sj5));
IkReal x1054=((r02)*(sj4));
IkReal x1055=((IkReal(1.00000000000000))*(cj0));
IkReal x1056=((cj4)*(cj5));
IkReal x1057=((IkReal(1.00000000000000))*(cj1));
IkReal x1058=((cj4)*(sj5));
IkReal x1059=((cj5)*(r11));
IkReal x1060=((IkReal(1.00000000000000))*(sj1));
IkReal x1061=((cj5)*(r01));
IkReal x1062=((r00)*(sj5));
IkReal x1063=((sj2)*(x1049));
IkReal x1064=((cj2)*(x1049));
IkReal x1065=((cj2)*(x1050));
IkReal x1066=((sj2)*(x1050));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1060)*(x1064)))+(((r20)*(sj5)))+(((IkReal(-1.00000000000000))*(x1057)*(x1063)))+(((cj5)*(r21))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1055)*(x1059)))+(((IkReal(-1.00000000000000))*(x1053)*(x1055)))+(x1050)+(((sj0)*(x1062)))+(((sj0)*(x1061))));
evalcond[2]=((((sj1)*(x1065)))+(((cj1)*(x1066)))+(((IkReal(-1.00000000000000))*(r21)*(x1058)))+(((r22)*(sj4)))+(((r20)*(x1056))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1051)*(x1059)))+(((IkReal(-1.00000000000000))*(x1057)*(x1064)))+(((IkReal(-1.00000000000000))*(x1055)*(x1062)))+(((IkReal(-1.00000000000000))*(x1055)*(x1061)))+(((sj1)*(x1063)))+(((IkReal(-1.00000000000000))*(x1051)*(x1053))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1052)*(x1055)))+(((cj0)*(r11)*(x1058)))+(x1049)+(((IkReal(-1.00000000000000))*(r10)*(x1055)*(x1056)))+(((sj0)*(x1054)))+(((IkReal(-1.00000000000000))*(r01)*(x1051)*(x1058)))+(((r00)*(sj0)*(x1056))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1054)*(x1055)))+(((cj1)*(x1065)))+(((cj0)*(r01)*(x1058)))+(((IkReal(-1.00000000000000))*(x1051)*(x1052)))+(((IkReal(-1.00000000000000))*(x1060)*(x1066)))+(((IkReal(-1.00000000000000))*(r10)*(x1051)*(x1056)))+(((IkReal(-1.00000000000000))*(r00)*(x1055)*(x1056)))+(((r11)*(sj0)*(x1058))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1067=((IkReal(1.00000000000000))*(r21));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(cj5)*(x1067)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((cj4)*(cj5)*(r20)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x1067))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(cj5)*(x1067)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)))))), ((gconst26)*(((((cj4)*(cj5)*(r20)))+(((r22)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x1067)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1068=IKsin(j3);
IkReal x1069=IKcos(j3);
IkReal x1070=((IkReal(1.00000000000000))*(sj0));
IkReal x1071=((r12)*(sj4));
IkReal x1072=((r10)*(sj5));
IkReal x1073=((r02)*(sj4));
IkReal x1074=((IkReal(1.00000000000000))*(cj0));
IkReal x1075=((cj4)*(cj5));
IkReal x1076=((IkReal(1.00000000000000))*(cj1));
IkReal x1077=((cj4)*(sj5));
IkReal x1078=((cj5)*(r11));
IkReal x1079=((IkReal(1.00000000000000))*(sj1));
IkReal x1080=((cj5)*(r01));
IkReal x1081=((r00)*(sj5));
IkReal x1082=((sj2)*(x1068));
IkReal x1083=((cj2)*(x1068));
IkReal x1084=((cj2)*(x1069));
IkReal x1085=((sj2)*(x1069));
evalcond[0]=((((r20)*(sj5)))+(((IkReal(-1.00000000000000))*(x1079)*(x1083)))+(((IkReal(-1.00000000000000))*(x1076)*(x1082)))+(((cj5)*(r21))));
evalcond[1]=((((sj0)*(x1081)))+(((sj0)*(x1080)))+(((IkReal(-1.00000000000000))*(x1072)*(x1074)))+(x1069)+(((IkReal(-1.00000000000000))*(x1074)*(x1078))));
evalcond[2]=((((r20)*(x1075)))+(((r22)*(sj4)))+(((sj1)*(x1084)))+(((IkReal(-1.00000000000000))*(r21)*(x1077)))+(((cj1)*(x1085))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1076)*(x1083)))+(((IkReal(-1.00000000000000))*(x1070)*(x1072)))+(((IkReal(-1.00000000000000))*(x1070)*(x1078)))+(((IkReal(-1.00000000000000))*(x1074)*(x1081)))+(((sj1)*(x1082)))+(((IkReal(-1.00000000000000))*(x1074)*(x1080))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r10)*(x1074)*(x1075)))+(((IkReal(-1.00000000000000))*(r01)*(x1070)*(x1077)))+(((r00)*(sj0)*(x1075)))+(((sj0)*(x1073)))+(((IkReal(-1.00000000000000))*(x1071)*(x1074)))+(x1068)+(((cj0)*(r11)*(x1077))));
evalcond[5]=((((cj0)*(r01)*(x1077)))+(((IkReal(-1.00000000000000))*(r10)*(x1070)*(x1075)))+(((IkReal(-1.00000000000000))*(x1079)*(x1085)))+(((IkReal(-1.00000000000000))*(r00)*(x1074)*(x1075)))+(((r11)*(sj0)*(x1077)))+(((IkReal(-1.00000000000000))*(x1070)*(x1071)))+(((cj1)*(x1084)))+(((IkReal(-1.00000000000000))*(x1073)*(x1074))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - fanuc_m430ia2p (6d10797d63ea4c5c5ff74a6375c59976)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
